// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Sdk.pb.h"
// @@protoc_insertion_point(imports)

@implementation SdkRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SdkRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Request ()
@property (strong) NSString* eventId;
@property RequestTestType testType;
@property (strong) RequestDevice* device;
@property (strong) RequestApp* app;
@property (strong) RequestUser* user;
@property (strong) RequestSDK* sdk;
@property (strong) RequestImpression* impression;
@end

@implementation Request

- (BOOL) hasEventId {
  return !!hasEventId_;
}
- (void) setHasEventId:(BOOL) _value_ {
  hasEventId_ = !!_value_;
}
@synthesize eventId;
- (BOOL) hasTestType {
  return !!hasTestType_;
}
- (void) setHasTestType:(BOOL) _value_ {
  hasTestType_ = !!_value_;
}
@synthesize testType;
- (BOOL) hasDevice {
  return !!hasDevice_;
}
- (void) setHasDevice:(BOOL) _value_ {
  hasDevice_ = !!_value_;
}
@synthesize device;
- (BOOL) hasApp {
  return !!hasApp_;
}
- (void) setHasApp:(BOOL) _value_ {
  hasApp_ = !!_value_;
}
@synthesize app;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasSdk {
  return !!hasSdk_;
}
- (void) setHasSdk:(BOOL) _value_ {
  hasSdk_ = !!_value_;
}
@synthesize sdk;
- (BOOL) hasImpression {
  return !!hasImpression_;
}
- (void) setHasImpression:(BOOL) _value_ {
  hasImpression_ = !!_value_;
}
@synthesize impression;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventId = @"";
    self.testType = RequestTestTypeKDevelpoment;
    self.device = [RequestDevice defaultInstance];
    self.app = [RequestApp defaultInstance];
    self.user = [RequestUser defaultInstance];
    self.sdk = [RequestSDK defaultInstance];
    self.impression = [RequestImpression defaultInstance];
  }
  return self;
}
static Request* defaultRequestInstance = nil;
+ (void) initialize {
  if (self == [Request class]) {
    defaultRequestInstance = [[Request alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventId) {
    [output writeString:1 value:self.eventId];
  }
  if (self.hasTestType) {
    [output writeEnum:2 value:self.testType];
  }
  if (self.hasDevice) {
    [output writeMessage:4 value:self.device];
  }
  if (self.hasApp) {
    [output writeMessage:5 value:self.app];
  }
  if (self.hasUser) {
    [output writeMessage:6 value:self.user];
  }
  if (self.hasSdk) {
    [output writeMessage:7 value:self.sdk];
  }
  if (self.hasImpression) {
    [output writeMessage:8 value:self.impression];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventId) {
    size_ += computeStringSize(1, self.eventId);
  }
  if (self.hasTestType) {
    size_ += computeEnumSize(2, self.testType);
  }
  if (self.hasDevice) {
    size_ += computeMessageSize(4, self.device);
  }
  if (self.hasApp) {
    size_ += computeMessageSize(5, self.app);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(6, self.user);
  }
  if (self.hasSdk) {
    size_ += computeMessageSize(7, self.sdk);
  }
  if (self.hasImpression) {
    size_ += computeMessageSize(8, self.impression);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Request*) parseFromData:(NSData*) data {
  return (Request*)[[[Request builder] mergeFromData:data] build];
}
+ (Request*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Request*)[[[Request builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Request*) parseFromInputStream:(NSInputStream*) input {
  return (Request*)[[[Request builder] mergeFromInputStream:input] build];
}
+ (Request*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Request*)[[[Request builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Request*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Request*)[[[Request builder] mergeFromCodedInputStream:input] build];
}
+ (Request*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Request*)[[[Request builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestBuilder*) builder {
  return [[RequestBuilder alloc] init];
}
+ (RequestBuilder*) builderWithPrototype:(Request*) prototype {
  return [[Request builder] mergeFrom:prototype];
}
- (RequestBuilder*) builder {
  return [Request builder];
}
- (RequestBuilder*) toBuilder {
  return [Request builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventId", self.eventId];
  }
  if (self.hasTestType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"testType", NSStringFromRequestTestType(self.testType)];
  }
  if (self.hasDevice) {
    [output appendFormat:@"%@%@ {\n", indent, @"device"];
    [self.device writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasApp) {
    [output appendFormat:@"%@%@ {\n", indent, @"app"];
    [self.app writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSdk) {
    [output appendFormat:@"%@%@ {\n", indent, @"sdk"];
    [self.sdk writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasImpression) {
    [output appendFormat:@"%@%@ {\n", indent, @"impression"];
    [self.impression writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventId) {
    [dictionary setObject: self.eventId forKey: @"eventId"];
  }
  if (self.hasTestType) {
    [dictionary setObject: @(self.testType) forKey: @"testType"];
  }
  if (self.hasDevice) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.device storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"device"];
  }
  if (self.hasApp) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.app storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"app"];
  }
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  if (self.hasSdk) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.sdk storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"sdk"];
  }
  if (self.hasImpression) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.impression storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"impression"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Request class]]) {
    return NO;
  }
  Request *otherMessage = other;
  return
      self.hasEventId == otherMessage.hasEventId &&
      (!self.hasEventId || [self.eventId isEqual:otherMessage.eventId]) &&
      self.hasTestType == otherMessage.hasTestType &&
      (!self.hasTestType || self.testType == otherMessage.testType) &&
      self.hasDevice == otherMessage.hasDevice &&
      (!self.hasDevice || [self.device isEqual:otherMessage.device]) &&
      self.hasApp == otherMessage.hasApp &&
      (!self.hasApp || [self.app isEqual:otherMessage.app]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasSdk == otherMessage.hasSdk &&
      (!self.hasSdk || [self.sdk isEqual:otherMessage.sdk]) &&
      self.hasImpression == otherMessage.hasImpression &&
      (!self.hasImpression || [self.impression isEqual:otherMessage.impression]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventId) {
    hashCode = hashCode * 31 + [self.eventId hash];
  }
  if (self.hasTestType) {
    hashCode = hashCode * 31 + self.testType;
  }
  if (self.hasDevice) {
    hashCode = hashCode * 31 + [self.device hash];
  }
  if (self.hasApp) {
    hashCode = hashCode * 31 + [self.app hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasSdk) {
    hashCode = hashCode * 31 + [self.sdk hash];
  }
  if (self.hasImpression) {
    hashCode = hashCode * 31 + [self.impression hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL RequestTestTypeIsValidValue(RequestTestType value) {
  switch (value) {
    case RequestTestTypeKDevelpoment:
    case RequestTestTypeKProduction:
    case RequestTestTypeKDebug:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromRequestTestType(RequestTestType value) {
  switch (value) {
    case RequestTestTypeKDevelpoment:
      return @"RequestTestTypeKDevelpoment";
    case RequestTestTypeKProduction:
      return @"RequestTestTypeKProduction";
    case RequestTestTypeKDebug:
      return @"RequestTestTypeKDebug";
    default:
      return nil;
  }
}

@interface RequestDevice ()
@property (strong) NSString* ip;
@property (strong) NSString* userAgent;
@property SInt32 pixelWidth;
@property SInt32 pixelHeight;
@property Float64 physicalSize;
@property BOOL isFlashEnabled;
@property BOOL isJsEnabled;
@property (strong) NSString* name;
@property (strong) NSString* brand;
@property (strong) NSString* model;
@property (strong) NSString* os;
@property (strong) NSString* osVersion;
@property BOOL isRooted;
@property RequestDeviceDeviceOrientation deviceOrientation;
@property RequestDeviceDeviceType deviceType;
@property RequestDevicePlatform platform;
@property (strong) RequestDeviceGeo* geo;
@property RequestDeviceNetworkConnectionType networkConnectionType;
@property SInt32 carrierId;
@end

@implementation RequestDevice

- (BOOL) hasIp {
  return !!hasIp_;
}
- (void) setHasIp:(BOOL) _value_ {
  hasIp_ = !!_value_;
}
@synthesize ip;
- (BOOL) hasUserAgent {
  return !!hasUserAgent_;
}
- (void) setHasUserAgent:(BOOL) _value_ {
  hasUserAgent_ = !!_value_;
}
@synthesize userAgent;
- (BOOL) hasPixelWidth {
  return !!hasPixelWidth_;
}
- (void) setHasPixelWidth:(BOOL) _value_ {
  hasPixelWidth_ = !!_value_;
}
@synthesize pixelWidth;
- (BOOL) hasPixelHeight {
  return !!hasPixelHeight_;
}
- (void) setHasPixelHeight:(BOOL) _value_ {
  hasPixelHeight_ = !!_value_;
}
@synthesize pixelHeight;
- (BOOL) hasPhysicalSize {
  return !!hasPhysicalSize_;
}
- (void) setHasPhysicalSize:(BOOL) _value_ {
  hasPhysicalSize_ = !!_value_;
}
@synthesize physicalSize;
- (BOOL) hasIsFlashEnabled {
  return !!hasIsFlashEnabled_;
}
- (void) setHasIsFlashEnabled:(BOOL) _value_ {
  hasIsFlashEnabled_ = !!_value_;
}
- (BOOL) isFlashEnabled {
  return !!isFlashEnabled_;
}
- (void) setIsFlashEnabled:(BOOL) _value_ {
  isFlashEnabled_ = !!_value_;
}
- (BOOL) hasIsJsEnabled {
  return !!hasIsJsEnabled_;
}
- (void) setHasIsJsEnabled:(BOOL) _value_ {
  hasIsJsEnabled_ = !!_value_;
}
- (BOOL) isJsEnabled {
  return !!isJsEnabled_;
}
- (void) setIsJsEnabled:(BOOL) _value_ {
  isJsEnabled_ = !!_value_;
}
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasBrand {
  return !!hasBrand_;
}
- (void) setHasBrand:(BOOL) _value_ {
  hasBrand_ = !!_value_;
}
@synthesize brand;
- (BOOL) hasModel {
  return !!hasModel_;
}
- (void) setHasModel:(BOOL) _value_ {
  hasModel_ = !!_value_;
}
@synthesize model;
- (BOOL) hasOs {
  return !!hasOs_;
}
- (void) setHasOs:(BOOL) _value_ {
  hasOs_ = !!_value_;
}
@synthesize os;
- (BOOL) hasOsVersion {
  return !!hasOsVersion_;
}
- (void) setHasOsVersion:(BOOL) _value_ {
  hasOsVersion_ = !!_value_;
}
@synthesize osVersion;
- (BOOL) hasIsRooted {
  return !!hasIsRooted_;
}
- (void) setHasIsRooted:(BOOL) _value_ {
  hasIsRooted_ = !!_value_;
}
- (BOOL) isRooted {
  return !!isRooted_;
}
- (void) setIsRooted:(BOOL) _value_ {
  isRooted_ = !!_value_;
}
- (BOOL) hasDeviceOrientation {
  return !!hasDeviceOrientation_;
}
- (void) setHasDeviceOrientation:(BOOL) _value_ {
  hasDeviceOrientation_ = !!_value_;
}
@synthesize deviceOrientation;
- (BOOL) hasDeviceType {
  return !!hasDeviceType_;
}
- (void) setHasDeviceType:(BOOL) _value_ {
  hasDeviceType_ = !!_value_;
}
@synthesize deviceType;
- (BOOL) hasPlatform {
  return !!hasPlatform_;
}
- (void) setHasPlatform:(BOOL) _value_ {
  hasPlatform_ = !!_value_;
}
@synthesize platform;
- (BOOL) hasGeo {
  return !!hasGeo_;
}
- (void) setHasGeo:(BOOL) _value_ {
  hasGeo_ = !!_value_;
}
@synthesize geo;
- (BOOL) hasNetworkConnectionType {
  return !!hasNetworkConnectionType_;
}
- (void) setHasNetworkConnectionType:(BOOL) _value_ {
  hasNetworkConnectionType_ = !!_value_;
}
@synthesize networkConnectionType;
- (BOOL) hasCarrierId {
  return !!hasCarrierId_;
}
- (void) setHasCarrierId:(BOOL) _value_ {
  hasCarrierId_ = !!_value_;
}
@synthesize carrierId;
- (instancetype) init {
  if ((self = [super init])) {
    self.ip = @"";
    self.userAgent = @"";
    self.pixelWidth = 0;
    self.pixelHeight = 0;
    self.physicalSize = 0;
    self.isFlashEnabled = NO;
    self.isJsEnabled = NO;
    self.name = @"";
    self.brand = @"";
    self.model = @"";
    self.os = @"";
    self.osVersion = @"";
    self.isRooted = NO;
    self.deviceOrientation = RequestDeviceDeviceOrientationKUnknownDeviceOrientation;
    self.deviceType = RequestDeviceDeviceTypeKUnknownDeviceType;
    self.platform = RequestDevicePlatformKIos;
    self.geo = [RequestDeviceGeo defaultInstance];
    self.networkConnectionType = RequestDeviceNetworkConnectionTypeKUnknownNetWork;
    self.carrierId = 0;
  }
  return self;
}
static RequestDevice* defaultRequestDeviceInstance = nil;
+ (void) initialize {
  if (self == [RequestDevice class]) {
    defaultRequestDeviceInstance = [[RequestDevice alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestDeviceInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestDeviceInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIp) {
    [output writeString:1 value:self.ip];
  }
  if (self.hasUserAgent) {
    [output writeString:2 value:self.userAgent];
  }
  if (self.hasPixelWidth) {
    [output writeInt32:3 value:self.pixelWidth];
  }
  if (self.hasPixelHeight) {
    [output writeInt32:4 value:self.pixelHeight];
  }
  if (self.hasPhysicalSize) {
    [output writeDouble:5 value:self.physicalSize];
  }
  if (self.hasIsFlashEnabled) {
    [output writeBool:6 value:self.isFlashEnabled];
  }
  if (self.hasIsJsEnabled) {
    [output writeBool:7 value:self.isJsEnabled];
  }
  if (self.hasName) {
    [output writeString:8 value:self.name];
  }
  if (self.hasBrand) {
    [output writeString:9 value:self.brand];
  }
  if (self.hasModel) {
    [output writeString:10 value:self.model];
  }
  if (self.hasOs) {
    [output writeString:11 value:self.os];
  }
  if (self.hasOsVersion) {
    [output writeString:12 value:self.osVersion];
  }
  if (self.hasIsRooted) {
    [output writeBool:13 value:self.isRooted];
  }
  if (self.hasDeviceOrientation) {
    [output writeEnum:14 value:self.deviceOrientation];
  }
  if (self.hasDeviceType) {
    [output writeEnum:15 value:self.deviceType];
  }
  if (self.hasGeo) {
    [output writeMessage:16 value:self.geo];
  }
  if (self.hasNetworkConnectionType) {
    [output writeEnum:17 value:self.networkConnectionType];
  }
  if (self.hasCarrierId) {
    [output writeInt32:18 value:self.carrierId];
  }
  if (self.hasPlatform) {
    [output writeEnum:151 value:self.platform];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasIp) {
    size_ += computeStringSize(1, self.ip);
  }
  if (self.hasUserAgent) {
    size_ += computeStringSize(2, self.userAgent);
  }
  if (self.hasPixelWidth) {
    size_ += computeInt32Size(3, self.pixelWidth);
  }
  if (self.hasPixelHeight) {
    size_ += computeInt32Size(4, self.pixelHeight);
  }
  if (self.hasPhysicalSize) {
    size_ += computeDoubleSize(5, self.physicalSize);
  }
  if (self.hasIsFlashEnabled) {
    size_ += computeBoolSize(6, self.isFlashEnabled);
  }
  if (self.hasIsJsEnabled) {
    size_ += computeBoolSize(7, self.isJsEnabled);
  }
  if (self.hasName) {
    size_ += computeStringSize(8, self.name);
  }
  if (self.hasBrand) {
    size_ += computeStringSize(9, self.brand);
  }
  if (self.hasModel) {
    size_ += computeStringSize(10, self.model);
  }
  if (self.hasOs) {
    size_ += computeStringSize(11, self.os);
  }
  if (self.hasOsVersion) {
    size_ += computeStringSize(12, self.osVersion);
  }
  if (self.hasIsRooted) {
    size_ += computeBoolSize(13, self.isRooted);
  }
  if (self.hasDeviceOrientation) {
    size_ += computeEnumSize(14, self.deviceOrientation);
  }
  if (self.hasDeviceType) {
    size_ += computeEnumSize(15, self.deviceType);
  }
  if (self.hasGeo) {
    size_ += computeMessageSize(16, self.geo);
  }
  if (self.hasNetworkConnectionType) {
    size_ += computeEnumSize(17, self.networkConnectionType);
  }
  if (self.hasCarrierId) {
    size_ += computeInt32Size(18, self.carrierId);
  }
  if (self.hasPlatform) {
    size_ += computeEnumSize(151, self.platform);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestDevice*) parseFromData:(NSData*) data {
  return (RequestDevice*)[[[RequestDevice builder] mergeFromData:data] build];
}
+ (RequestDevice*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestDevice*)[[[RequestDevice builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestDevice*) parseFromInputStream:(NSInputStream*) input {
  return (RequestDevice*)[[[RequestDevice builder] mergeFromInputStream:input] build];
}
+ (RequestDevice*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestDevice*)[[[RequestDevice builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestDevice*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestDevice*)[[[RequestDevice builder] mergeFromCodedInputStream:input] build];
}
+ (RequestDevice*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestDevice*)[[[RequestDevice builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestDeviceBuilder*) builder {
  return [[RequestDeviceBuilder alloc] init];
}
+ (RequestDeviceBuilder*) builderWithPrototype:(RequestDevice*) prototype {
  return [[RequestDevice builder] mergeFrom:prototype];
}
- (RequestDeviceBuilder*) builder {
  return [RequestDevice builder];
}
- (RequestDeviceBuilder*) toBuilder {
  return [RequestDevice builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasIp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ip", self.ip];
  }
  if (self.hasUserAgent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userAgent", self.userAgent];
  }
  if (self.hasPixelWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pixelWidth", [NSNumber numberWithInteger:self.pixelWidth]];
  }
  if (self.hasPixelHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pixelHeight", [NSNumber numberWithInteger:self.pixelHeight]];
  }
  if (self.hasPhysicalSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"physicalSize", [NSNumber numberWithDouble:self.physicalSize]];
  }
  if (self.hasIsFlashEnabled) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isFlashEnabled", [NSNumber numberWithBool:self.isFlashEnabled]];
  }
  if (self.hasIsJsEnabled) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isJsEnabled", [NSNumber numberWithBool:self.isJsEnabled]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasBrand) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brand", self.brand];
  }
  if (self.hasModel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"model", self.model];
  }
  if (self.hasOs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"os", self.os];
  }
  if (self.hasOsVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"osVersion", self.osVersion];
  }
  if (self.hasIsRooted) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isRooted", [NSNumber numberWithBool:self.isRooted]];
  }
  if (self.hasDeviceOrientation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceOrientation", NSStringFromRequestDeviceDeviceOrientation(self.deviceOrientation)];
  }
  if (self.hasDeviceType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceType", NSStringFromRequestDeviceDeviceType(self.deviceType)];
  }
  if (self.hasGeo) {
    [output appendFormat:@"%@%@ {\n", indent, @"geo"];
    [self.geo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasNetworkConnectionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"networkConnectionType", NSStringFromRequestDeviceNetworkConnectionType(self.networkConnectionType)];
  }
  if (self.hasCarrierId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"carrierId", [NSNumber numberWithInteger:self.carrierId]];
  }
  if (self.hasPlatform) {
    [output appendFormat:@"%@%@: %@\n", indent, @"platform", NSStringFromRequestDevicePlatform(self.platform)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasIp) {
    [dictionary setObject: self.ip forKey: @"ip"];
  }
  if (self.hasUserAgent) {
    [dictionary setObject: self.userAgent forKey: @"userAgent"];
  }
  if (self.hasPixelWidth) {
    [dictionary setObject: [NSNumber numberWithInteger:self.pixelWidth] forKey: @"pixelWidth"];
  }
  if (self.hasPixelHeight) {
    [dictionary setObject: [NSNumber numberWithInteger:self.pixelHeight] forKey: @"pixelHeight"];
  }
  if (self.hasPhysicalSize) {
    [dictionary setObject: [NSNumber numberWithDouble:self.physicalSize] forKey: @"physicalSize"];
  }
  if (self.hasIsFlashEnabled) {
    [dictionary setObject: [NSNumber numberWithBool:self.isFlashEnabled] forKey: @"isFlashEnabled"];
  }
  if (self.hasIsJsEnabled) {
    [dictionary setObject: [NSNumber numberWithBool:self.isJsEnabled] forKey: @"isJsEnabled"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasBrand) {
    [dictionary setObject: self.brand forKey: @"brand"];
  }
  if (self.hasModel) {
    [dictionary setObject: self.model forKey: @"model"];
  }
  if (self.hasOs) {
    [dictionary setObject: self.os forKey: @"os"];
  }
  if (self.hasOsVersion) {
    [dictionary setObject: self.osVersion forKey: @"osVersion"];
  }
  if (self.hasIsRooted) {
    [dictionary setObject: [NSNumber numberWithBool:self.isRooted] forKey: @"isRooted"];
  }
  if (self.hasDeviceOrientation) {
    [dictionary setObject: @(self.deviceOrientation) forKey: @"deviceOrientation"];
  }
  if (self.hasDeviceType) {
    [dictionary setObject: @(self.deviceType) forKey: @"deviceType"];
  }
  if (self.hasGeo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.geo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"geo"];
  }
  if (self.hasNetworkConnectionType) {
    [dictionary setObject: @(self.networkConnectionType) forKey: @"networkConnectionType"];
  }
  if (self.hasCarrierId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.carrierId] forKey: @"carrierId"];
  }
  if (self.hasPlatform) {
    [dictionary setObject: @(self.platform) forKey: @"platform"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestDevice class]]) {
    return NO;
  }
  RequestDevice *otherMessage = other;
  return
      self.hasIp == otherMessage.hasIp &&
      (!self.hasIp || [self.ip isEqual:otherMessage.ip]) &&
      self.hasUserAgent == otherMessage.hasUserAgent &&
      (!self.hasUserAgent || [self.userAgent isEqual:otherMessage.userAgent]) &&
      self.hasPixelWidth == otherMessage.hasPixelWidth &&
      (!self.hasPixelWidth || self.pixelWidth == otherMessage.pixelWidth) &&
      self.hasPixelHeight == otherMessage.hasPixelHeight &&
      (!self.hasPixelHeight || self.pixelHeight == otherMessage.pixelHeight) &&
      self.hasPhysicalSize == otherMessage.hasPhysicalSize &&
      (!self.hasPhysicalSize || self.physicalSize == otherMessage.physicalSize) &&
      self.hasIsFlashEnabled == otherMessage.hasIsFlashEnabled &&
      (!self.hasIsFlashEnabled || self.isFlashEnabled == otherMessage.isFlashEnabled) &&
      self.hasIsJsEnabled == otherMessage.hasIsJsEnabled &&
      (!self.hasIsJsEnabled || self.isJsEnabled == otherMessage.isJsEnabled) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasBrand == otherMessage.hasBrand &&
      (!self.hasBrand || [self.brand isEqual:otherMessage.brand]) &&
      self.hasModel == otherMessage.hasModel &&
      (!self.hasModel || [self.model isEqual:otherMessage.model]) &&
      self.hasOs == otherMessage.hasOs &&
      (!self.hasOs || [self.os isEqual:otherMessage.os]) &&
      self.hasOsVersion == otherMessage.hasOsVersion &&
      (!self.hasOsVersion || [self.osVersion isEqual:otherMessage.osVersion]) &&
      self.hasIsRooted == otherMessage.hasIsRooted &&
      (!self.hasIsRooted || self.isRooted == otherMessage.isRooted) &&
      self.hasDeviceOrientation == otherMessage.hasDeviceOrientation &&
      (!self.hasDeviceOrientation || self.deviceOrientation == otherMessage.deviceOrientation) &&
      self.hasDeviceType == otherMessage.hasDeviceType &&
      (!self.hasDeviceType || self.deviceType == otherMessage.deviceType) &&
      self.hasGeo == otherMessage.hasGeo &&
      (!self.hasGeo || [self.geo isEqual:otherMessage.geo]) &&
      self.hasNetworkConnectionType == otherMessage.hasNetworkConnectionType &&
      (!self.hasNetworkConnectionType || self.networkConnectionType == otherMessage.networkConnectionType) &&
      self.hasCarrierId == otherMessage.hasCarrierId &&
      (!self.hasCarrierId || self.carrierId == otherMessage.carrierId) &&
      self.hasPlatform == otherMessage.hasPlatform &&
      (!self.hasPlatform || self.platform == otherMessage.platform) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasIp) {
    hashCode = hashCode * 31 + [self.ip hash];
  }
  if (self.hasUserAgent) {
    hashCode = hashCode * 31 + [self.userAgent hash];
  }
  if (self.hasPixelWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.pixelWidth] hash];
  }
  if (self.hasPixelHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.pixelHeight] hash];
  }
  if (self.hasPhysicalSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.physicalSize] hash];
  }
  if (self.hasIsFlashEnabled) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isFlashEnabled] hash];
  }
  if (self.hasIsJsEnabled) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isJsEnabled] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasBrand) {
    hashCode = hashCode * 31 + [self.brand hash];
  }
  if (self.hasModel) {
    hashCode = hashCode * 31 + [self.model hash];
  }
  if (self.hasOs) {
    hashCode = hashCode * 31 + [self.os hash];
  }
  if (self.hasOsVersion) {
    hashCode = hashCode * 31 + [self.osVersion hash];
  }
  if (self.hasIsRooted) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isRooted] hash];
  }
  if (self.hasDeviceOrientation) {
    hashCode = hashCode * 31 + self.deviceOrientation;
  }
  if (self.hasDeviceType) {
    hashCode = hashCode * 31 + self.deviceType;
  }
  if (self.hasGeo) {
    hashCode = hashCode * 31 + [self.geo hash];
  }
  if (self.hasNetworkConnectionType) {
    hashCode = hashCode * 31 + self.networkConnectionType;
  }
  if (self.hasCarrierId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.carrierId] hash];
  }
  if (self.hasPlatform) {
    hashCode = hashCode * 31 + self.platform;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL RequestDeviceDeviceOrientationIsValidValue(RequestDeviceDeviceOrientation value) {
  switch (value) {
    case RequestDeviceDeviceOrientationKUnknownDeviceOrientation:
    case RequestDeviceDeviceOrientationKPortrait:
    case RequestDeviceDeviceOrientationKPortraitUpsideDown:
    case RequestDeviceDeviceOrientationKLandscapeLeft:
    case RequestDeviceDeviceOrientationKLandscapeRight:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromRequestDeviceDeviceOrientation(RequestDeviceDeviceOrientation value) {
  switch (value) {
    case RequestDeviceDeviceOrientationKUnknownDeviceOrientation:
      return @"RequestDeviceDeviceOrientationKUnknownDeviceOrientation";
    case RequestDeviceDeviceOrientationKPortrait:
      return @"RequestDeviceDeviceOrientationKPortrait";
    case RequestDeviceDeviceOrientationKPortraitUpsideDown:
      return @"RequestDeviceDeviceOrientationKPortraitUpsideDown";
    case RequestDeviceDeviceOrientationKLandscapeLeft:
      return @"RequestDeviceDeviceOrientationKLandscapeLeft";
    case RequestDeviceDeviceOrientationKLandscapeRight:
      return @"RequestDeviceDeviceOrientationKLandscapeRight";
    default:
      return nil;
  }
}

BOOL RequestDeviceDeviceTypeIsValidValue(RequestDeviceDeviceType value) {
  switch (value) {
    case RequestDeviceDeviceTypeKUnknownDeviceType:
    case RequestDeviceDeviceTypeKPhone:
    case RequestDeviceDeviceTypeKPad:
    case RequestDeviceDeviceTypeKTv:
    case RequestDeviceDeviceTypeKPc:
    case RequestDeviceDeviceTypeKGameConsole:
    case RequestDeviceDeviceTypeKCarPlay:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromRequestDeviceDeviceType(RequestDeviceDeviceType value) {
  switch (value) {
    case RequestDeviceDeviceTypeKUnknownDeviceType:
      return @"RequestDeviceDeviceTypeKUnknownDeviceType";
    case RequestDeviceDeviceTypeKPhone:
      return @"RequestDeviceDeviceTypeKPhone";
    case RequestDeviceDeviceTypeKPad:
      return @"RequestDeviceDeviceTypeKPad";
    case RequestDeviceDeviceTypeKTv:
      return @"RequestDeviceDeviceTypeKTv";
    case RequestDeviceDeviceTypeKPc:
      return @"RequestDeviceDeviceTypeKPc";
    case RequestDeviceDeviceTypeKGameConsole:
      return @"RequestDeviceDeviceTypeKGameConsole";
    case RequestDeviceDeviceTypeKCarPlay:
      return @"RequestDeviceDeviceTypeKCarPlay";
    default:
      return nil;
  }
}

BOOL RequestDevicePlatformIsValidValue(RequestDevicePlatform value) {
  switch (value) {
    case RequestDevicePlatformKIos:
    case RequestDevicePlatformKAndroid:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromRequestDevicePlatform(RequestDevicePlatform value) {
  switch (value) {
    case RequestDevicePlatformKIos:
      return @"RequestDevicePlatformKIos";
    case RequestDevicePlatformKAndroid:
      return @"RequestDevicePlatformKAndroid";
    default:
      return nil;
  }
}

BOOL RequestDeviceNetworkConnectionTypeIsValidValue(RequestDeviceNetworkConnectionType value) {
  switch (value) {
    case RequestDeviceNetworkConnectionTypeKUnknownNetWork:
    case RequestDeviceNetworkConnectionTypeKWifi:
    case RequestDeviceNetworkConnectionTypeKG2:
    case RequestDeviceNetworkConnectionTypeKG3:
    case RequestDeviceNetworkConnectionTypeKG4:
    case RequestDeviceNetworkConnectionTypeKG5:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromRequestDeviceNetworkConnectionType(RequestDeviceNetworkConnectionType value) {
  switch (value) {
    case RequestDeviceNetworkConnectionTypeKUnknownNetWork:
      return @"RequestDeviceNetworkConnectionTypeKUnknownNetWork";
    case RequestDeviceNetworkConnectionTypeKWifi:
      return @"RequestDeviceNetworkConnectionTypeKWifi";
    case RequestDeviceNetworkConnectionTypeKG2:
      return @"RequestDeviceNetworkConnectionTypeKG2";
    case RequestDeviceNetworkConnectionTypeKG3:
      return @"RequestDeviceNetworkConnectionTypeKG3";
    case RequestDeviceNetworkConnectionTypeKG4:
      return @"RequestDeviceNetworkConnectionTypeKG4";
    case RequestDeviceNetworkConnectionTypeKG5:
      return @"RequestDeviceNetworkConnectionTypeKG5";
    default:
      return nil;
  }
}

@interface RequestDeviceGeo ()
@property Float64 longitude;
@property Float64 latitude;
@end

@implementation RequestDeviceGeo

- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) _value_ {
  hasLongitude_ = !!_value_;
}
@synthesize longitude;
- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) _value_ {
  hasLatitude_ = !!_value_;
}
@synthesize latitude;
- (instancetype) init {
  if ((self = [super init])) {
    self.longitude = 0;
    self.latitude = 0;
  }
  return self;
}
static RequestDeviceGeo* defaultRequestDeviceGeoInstance = nil;
+ (void) initialize {
  if (self == [RequestDeviceGeo class]) {
    defaultRequestDeviceGeoInstance = [[RequestDeviceGeo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestDeviceGeoInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestDeviceGeoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLongitude) {
    [output writeDouble:1 value:self.longitude];
  }
  if (self.hasLatitude) {
    [output writeDouble:2 value:self.latitude];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLongitude) {
    size_ += computeDoubleSize(1, self.longitude);
  }
  if (self.hasLatitude) {
    size_ += computeDoubleSize(2, self.latitude);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestDeviceGeo*) parseFromData:(NSData*) data {
  return (RequestDeviceGeo*)[[[RequestDeviceGeo builder] mergeFromData:data] build];
}
+ (RequestDeviceGeo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestDeviceGeo*)[[[RequestDeviceGeo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestDeviceGeo*) parseFromInputStream:(NSInputStream*) input {
  return (RequestDeviceGeo*)[[[RequestDeviceGeo builder] mergeFromInputStream:input] build];
}
+ (RequestDeviceGeo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestDeviceGeo*)[[[RequestDeviceGeo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestDeviceGeo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestDeviceGeo*)[[[RequestDeviceGeo builder] mergeFromCodedInputStream:input] build];
}
+ (RequestDeviceGeo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestDeviceGeo*)[[[RequestDeviceGeo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestDeviceGeoBuilder*) builder {
  return [[RequestDeviceGeoBuilder alloc] init];
}
+ (RequestDeviceGeoBuilder*) builderWithPrototype:(RequestDeviceGeo*) prototype {
  return [[RequestDeviceGeo builder] mergeFrom:prototype];
}
- (RequestDeviceGeoBuilder*) builder {
  return [RequestDeviceGeo builder];
}
- (RequestDeviceGeoBuilder*) toBuilder {
  return [RequestDeviceGeo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLongitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"longitude", [NSNumber numberWithDouble:self.longitude]];
  }
  if (self.hasLatitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latitude", [NSNumber numberWithDouble:self.latitude]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLongitude) {
    [dictionary setObject: [NSNumber numberWithDouble:self.longitude] forKey: @"longitude"];
  }
  if (self.hasLatitude) {
    [dictionary setObject: [NSNumber numberWithDouble:self.latitude] forKey: @"latitude"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestDeviceGeo class]]) {
    return NO;
  }
  RequestDeviceGeo *otherMessage = other;
  return
      self.hasLongitude == otherMessage.hasLongitude &&
      (!self.hasLongitude || self.longitude == otherMessage.longitude) &&
      self.hasLatitude == otherMessage.hasLatitude &&
      (!self.hasLatitude || self.latitude == otherMessage.latitude) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLongitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.longitude] hash];
  }
  if (self.hasLatitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.latitude] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestDeviceGeoBuilder()
@property (strong) RequestDeviceGeo* resultGeo;
@end

@implementation RequestDeviceGeoBuilder
@synthesize resultGeo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGeo = [[RequestDeviceGeo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGeo;
}
- (RequestDeviceGeoBuilder*) clear {
  self.resultGeo = [[RequestDeviceGeo alloc] init];
  return self;
}
- (RequestDeviceGeoBuilder*) clone {
  return [RequestDeviceGeo builderWithPrototype:resultGeo];
}
- (RequestDeviceGeo*) defaultInstance {
  return [RequestDeviceGeo defaultInstance];
}
- (RequestDeviceGeo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestDeviceGeo*) buildPartial {
  RequestDeviceGeo* returnMe = resultGeo;
  self.resultGeo = nil;
  return returnMe;
}
- (RequestDeviceGeoBuilder*) mergeFrom:(RequestDeviceGeo*) other {
  if (other == [RequestDeviceGeo defaultInstance]) {
    return self;
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestDeviceGeoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestDeviceGeoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setLongitude:[input readDouble]];
        break;
      }
      case 17: {
        [self setLatitude:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasLongitude {
  return resultGeo.hasLongitude;
}
- (Float64) longitude {
  return resultGeo.longitude;
}
- (RequestDeviceGeoBuilder*) setLongitude:(Float64) value {
  resultGeo.hasLongitude = YES;
  resultGeo.longitude = value;
  return self;
}
- (RequestDeviceGeoBuilder*) clearLongitude {
  resultGeo.hasLongitude = NO;
  resultGeo.longitude = 0;
  return self;
}
- (BOOL) hasLatitude {
  return resultGeo.hasLatitude;
}
- (Float64) latitude {
  return resultGeo.latitude;
}
- (RequestDeviceGeoBuilder*) setLatitude:(Float64) value {
  resultGeo.hasLatitude = YES;
  resultGeo.latitude = value;
  return self;
}
- (RequestDeviceGeoBuilder*) clearLatitude {
  resultGeo.hasLatitude = NO;
  resultGeo.latitude = 0;
  return self;
}
@end

@interface RequestDeviceBuilder()
@property (strong) RequestDevice* resultDevice;
@end

@implementation RequestDeviceBuilder
@synthesize resultDevice;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDevice = [[RequestDevice alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDevice;
}
- (RequestDeviceBuilder*) clear {
  self.resultDevice = [[RequestDevice alloc] init];
  return self;
}
- (RequestDeviceBuilder*) clone {
  return [RequestDevice builderWithPrototype:resultDevice];
}
- (RequestDevice*) defaultInstance {
  return [RequestDevice defaultInstance];
}
- (RequestDevice*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestDevice*) buildPartial {
  RequestDevice* returnMe = resultDevice;
  self.resultDevice = nil;
  return returnMe;
}
- (RequestDeviceBuilder*) mergeFrom:(RequestDevice*) other {
  if (other == [RequestDevice defaultInstance]) {
    return self;
  }
  if (other.hasIp) {
    [self setIp:other.ip];
  }
  if (other.hasUserAgent) {
    [self setUserAgent:other.userAgent];
  }
  if (other.hasPixelWidth) {
    [self setPixelWidth:other.pixelWidth];
  }
  if (other.hasPixelHeight) {
    [self setPixelHeight:other.pixelHeight];
  }
  if (other.hasPhysicalSize) {
    [self setPhysicalSize:other.physicalSize];
  }
  if (other.hasIsFlashEnabled) {
    [self setIsFlashEnabled:other.isFlashEnabled];
  }
  if (other.hasIsJsEnabled) {
    [self setIsJsEnabled:other.isJsEnabled];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasBrand) {
    [self setBrand:other.brand];
  }
  if (other.hasModel) {
    [self setModel:other.model];
  }
  if (other.hasOs) {
    [self setOs:other.os];
  }
  if (other.hasOsVersion) {
    [self setOsVersion:other.osVersion];
  }
  if (other.hasIsRooted) {
    [self setIsRooted:other.isRooted];
  }
  if (other.hasDeviceOrientation) {
    [self setDeviceOrientation:other.deviceOrientation];
  }
  if (other.hasDeviceType) {
    [self setDeviceType:other.deviceType];
  }
  if (other.hasPlatform) {
    [self setPlatform:other.platform];
  }
  if (other.hasGeo) {
    [self mergeGeo:other.geo];
  }
  if (other.hasNetworkConnectionType) {
    [self setNetworkConnectionType:other.networkConnectionType];
  }
  if (other.hasCarrierId) {
    [self setCarrierId:other.carrierId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestDeviceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestDeviceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setIp:[input readString]];
        break;
      }
      case 18: {
        [self setUserAgent:[input readString]];
        break;
      }
      case 24: {
        [self setPixelWidth:[input readInt32]];
        break;
      }
      case 32: {
        [self setPixelHeight:[input readInt32]];
        break;
      }
      case 41: {
        [self setPhysicalSize:[input readDouble]];
        break;
      }
      case 48: {
        [self setIsFlashEnabled:[input readBool]];
        break;
      }
      case 56: {
        [self setIsJsEnabled:[input readBool]];
        break;
      }
      case 66: {
        [self setName:[input readString]];
        break;
      }
      case 74: {
        [self setBrand:[input readString]];
        break;
      }
      case 82: {
        [self setModel:[input readString]];
        break;
      }
      case 90: {
        [self setOs:[input readString]];
        break;
      }
      case 98: {
        [self setOsVersion:[input readString]];
        break;
      }
      case 104: {
        [self setIsRooted:[input readBool]];
        break;
      }
      case 112: {
        RequestDeviceDeviceOrientation value = (RequestDeviceDeviceOrientation)[input readEnum];
        if (RequestDeviceDeviceOrientationIsValidValue(value)) {
          [self setDeviceOrientation:value];
        } else {
          [unknownFields mergeVarintField:14 value:value];
        }
        break;
      }
      case 120: {
        RequestDeviceDeviceType value = (RequestDeviceDeviceType)[input readEnum];
        if (RequestDeviceDeviceTypeIsValidValue(value)) {
          [self setDeviceType:value];
        } else {
          [unknownFields mergeVarintField:15 value:value];
        }
        break;
      }
      case 130: {
        RequestDeviceGeoBuilder* subBuilder = [RequestDeviceGeo builder];
        if (self.hasGeo) {
          [subBuilder mergeFrom:self.geo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGeo:[subBuilder buildPartial]];
        break;
      }
      case 136: {
        RequestDeviceNetworkConnectionType value = (RequestDeviceNetworkConnectionType)[input readEnum];
        if (RequestDeviceNetworkConnectionTypeIsValidValue(value)) {
          [self setNetworkConnectionType:value];
        } else {
          [unknownFields mergeVarintField:17 value:value];
        }
        break;
      }
      case 144: {
        [self setCarrierId:[input readInt32]];
        break;
      }
      case 1208: {
        RequestDevicePlatform value = (RequestDevicePlatform)[input readEnum];
        if (RequestDevicePlatformIsValidValue(value)) {
          [self setPlatform:value];
        } else {
          [unknownFields mergeVarintField:151 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasIp {
  return resultDevice.hasIp;
}
- (NSString*) ip {
  return resultDevice.ip;
}
- (RequestDeviceBuilder*) setIp:(NSString*) value {
  resultDevice.hasIp = YES;
  resultDevice.ip = value;
  return self;
}
- (RequestDeviceBuilder*) clearIp {
  resultDevice.hasIp = NO;
  resultDevice.ip = @"";
  return self;
}
- (BOOL) hasUserAgent {
  return resultDevice.hasUserAgent;
}
- (NSString*) userAgent {
  return resultDevice.userAgent;
}
- (RequestDeviceBuilder*) setUserAgent:(NSString*) value {
  resultDevice.hasUserAgent = YES;
  resultDevice.userAgent = value;
  return self;
}
- (RequestDeviceBuilder*) clearUserAgent {
  resultDevice.hasUserAgent = NO;
  resultDevice.userAgent = @"";
  return self;
}
- (BOOL) hasPixelWidth {
  return resultDevice.hasPixelWidth;
}
- (SInt32) pixelWidth {
  return resultDevice.pixelWidth;
}
- (RequestDeviceBuilder*) setPixelWidth:(SInt32) value {
  resultDevice.hasPixelWidth = YES;
  resultDevice.pixelWidth = value;
  return self;
}
- (RequestDeviceBuilder*) clearPixelWidth {
  resultDevice.hasPixelWidth = NO;
  resultDevice.pixelWidth = 0;
  return self;
}
- (BOOL) hasPixelHeight {
  return resultDevice.hasPixelHeight;
}
- (SInt32) pixelHeight {
  return resultDevice.pixelHeight;
}
- (RequestDeviceBuilder*) setPixelHeight:(SInt32) value {
  resultDevice.hasPixelHeight = YES;
  resultDevice.pixelHeight = value;
  return self;
}
- (RequestDeviceBuilder*) clearPixelHeight {
  resultDevice.hasPixelHeight = NO;
  resultDevice.pixelHeight = 0;
  return self;
}
- (BOOL) hasPhysicalSize {
  return resultDevice.hasPhysicalSize;
}
- (Float64) physicalSize {
  return resultDevice.physicalSize;
}
- (RequestDeviceBuilder*) setPhysicalSize:(Float64) value {
  resultDevice.hasPhysicalSize = YES;
  resultDevice.physicalSize = value;
  return self;
}
- (RequestDeviceBuilder*) clearPhysicalSize {
  resultDevice.hasPhysicalSize = NO;
  resultDevice.physicalSize = 0;
  return self;
}
- (BOOL) hasIsFlashEnabled {
  return resultDevice.hasIsFlashEnabled;
}
- (BOOL) isFlashEnabled {
  return resultDevice.isFlashEnabled;
}
- (RequestDeviceBuilder*) setIsFlashEnabled:(BOOL) value {
  resultDevice.hasIsFlashEnabled = YES;
  resultDevice.isFlashEnabled = value;
  return self;
}
- (RequestDeviceBuilder*) clearIsFlashEnabled {
  resultDevice.hasIsFlashEnabled = NO;
  resultDevice.isFlashEnabled = NO;
  return self;
}
- (BOOL) hasIsJsEnabled {
  return resultDevice.hasIsJsEnabled;
}
- (BOOL) isJsEnabled {
  return resultDevice.isJsEnabled;
}
- (RequestDeviceBuilder*) setIsJsEnabled:(BOOL) value {
  resultDevice.hasIsJsEnabled = YES;
  resultDevice.isJsEnabled = value;
  return self;
}
- (RequestDeviceBuilder*) clearIsJsEnabled {
  resultDevice.hasIsJsEnabled = NO;
  resultDevice.isJsEnabled = NO;
  return self;
}
- (BOOL) hasName {
  return resultDevice.hasName;
}
- (NSString*) name {
  return resultDevice.name;
}
- (RequestDeviceBuilder*) setName:(NSString*) value {
  resultDevice.hasName = YES;
  resultDevice.name = value;
  return self;
}
- (RequestDeviceBuilder*) clearName {
  resultDevice.hasName = NO;
  resultDevice.name = @"";
  return self;
}
- (BOOL) hasBrand {
  return resultDevice.hasBrand;
}
- (NSString*) brand {
  return resultDevice.brand;
}
- (RequestDeviceBuilder*) setBrand:(NSString*) value {
  resultDevice.hasBrand = YES;
  resultDevice.brand = value;
  return self;
}
- (RequestDeviceBuilder*) clearBrand {
  resultDevice.hasBrand = NO;
  resultDevice.brand = @"";
  return self;
}
- (BOOL) hasModel {
  return resultDevice.hasModel;
}
- (NSString*) model {
  return resultDevice.model;
}
- (RequestDeviceBuilder*) setModel:(NSString*) value {
  resultDevice.hasModel = YES;
  resultDevice.model = value;
  return self;
}
- (RequestDeviceBuilder*) clearModel {
  resultDevice.hasModel = NO;
  resultDevice.model = @"";
  return self;
}
- (BOOL) hasOs {
  return resultDevice.hasOs;
}
- (NSString*) os {
  return resultDevice.os;
}
- (RequestDeviceBuilder*) setOs:(NSString*) value {
  resultDevice.hasOs = YES;
  resultDevice.os = value;
  return self;
}
- (RequestDeviceBuilder*) clearOs {
  resultDevice.hasOs = NO;
  resultDevice.os = @"";
  return self;
}
- (BOOL) hasOsVersion {
  return resultDevice.hasOsVersion;
}
- (NSString*) osVersion {
  return resultDevice.osVersion;
}
- (RequestDeviceBuilder*) setOsVersion:(NSString*) value {
  resultDevice.hasOsVersion = YES;
  resultDevice.osVersion = value;
  return self;
}
- (RequestDeviceBuilder*) clearOsVersion {
  resultDevice.hasOsVersion = NO;
  resultDevice.osVersion = @"";
  return self;
}
- (BOOL) hasIsRooted {
  return resultDevice.hasIsRooted;
}
- (BOOL) isRooted {
  return resultDevice.isRooted;
}
- (RequestDeviceBuilder*) setIsRooted:(BOOL) value {
  resultDevice.hasIsRooted = YES;
  resultDevice.isRooted = value;
  return self;
}
- (RequestDeviceBuilder*) clearIsRooted {
  resultDevice.hasIsRooted = NO;
  resultDevice.isRooted = NO;
  return self;
}
- (BOOL) hasDeviceOrientation {
  return resultDevice.hasDeviceOrientation;
}
- (RequestDeviceDeviceOrientation) deviceOrientation {
  return resultDevice.deviceOrientation;
}
- (RequestDeviceBuilder*) setDeviceOrientation:(RequestDeviceDeviceOrientation) value {
  resultDevice.hasDeviceOrientation = YES;
  resultDevice.deviceOrientation = value;
  return self;
}
- (RequestDeviceBuilder*) clearDeviceOrientation {
  resultDevice.hasDeviceOrientation = NO;
  resultDevice.deviceOrientation = RequestDeviceDeviceOrientationKUnknownDeviceOrientation;
  return self;
}
- (BOOL) hasDeviceType {
  return resultDevice.hasDeviceType;
}
- (RequestDeviceDeviceType) deviceType {
  return resultDevice.deviceType;
}
- (RequestDeviceBuilder*) setDeviceType:(RequestDeviceDeviceType) value {
  resultDevice.hasDeviceType = YES;
  resultDevice.deviceType = value;
  return self;
}
- (RequestDeviceBuilder*) clearDeviceType {
  resultDevice.hasDeviceType = NO;
  resultDevice.deviceType = RequestDeviceDeviceTypeKUnknownDeviceType;
  return self;
}
- (BOOL) hasPlatform {
  return resultDevice.hasPlatform;
}
- (RequestDevicePlatform) platform {
  return resultDevice.platform;
}
- (RequestDeviceBuilder*) setPlatform:(RequestDevicePlatform) value {
  resultDevice.hasPlatform = YES;
  resultDevice.platform = value;
  return self;
}
- (RequestDeviceBuilder*) clearPlatform {
  resultDevice.hasPlatform = NO;
  resultDevice.platform = RequestDevicePlatformKIos;
  return self;
}
- (BOOL) hasGeo {
  return resultDevice.hasGeo;
}
- (RequestDeviceGeo*) geo {
  return resultDevice.geo;
}
- (RequestDeviceBuilder*) setGeo:(RequestDeviceGeo*) value {
  resultDevice.hasGeo = YES;
  resultDevice.geo = value;
  return self;
}
- (RequestDeviceBuilder*) setGeoBuilder:(RequestDeviceGeoBuilder*) builderForValue {
  return [self setGeo:[builderForValue build]];
}
- (RequestDeviceBuilder*) mergeGeo:(RequestDeviceGeo*) value {
  if (resultDevice.hasGeo &&
      resultDevice.geo != [RequestDeviceGeo defaultInstance]) {
    resultDevice.geo =
      [[[RequestDeviceGeo builderWithPrototype:resultDevice.geo] mergeFrom:value] buildPartial];
  } else {
    resultDevice.geo = value;
  }
  resultDevice.hasGeo = YES;
  return self;
}
- (RequestDeviceBuilder*) clearGeo {
  resultDevice.hasGeo = NO;
  resultDevice.geo = [RequestDeviceGeo defaultInstance];
  return self;
}
- (BOOL) hasNetworkConnectionType {
  return resultDevice.hasNetworkConnectionType;
}
- (RequestDeviceNetworkConnectionType) networkConnectionType {
  return resultDevice.networkConnectionType;
}
- (RequestDeviceBuilder*) setNetworkConnectionType:(RequestDeviceNetworkConnectionType) value {
  resultDevice.hasNetworkConnectionType = YES;
  resultDevice.networkConnectionType = value;
  return self;
}
- (RequestDeviceBuilder*) clearNetworkConnectionType {
  resultDevice.hasNetworkConnectionType = NO;
  resultDevice.networkConnectionType = RequestDeviceNetworkConnectionTypeKUnknownNetWork;
  return self;
}
- (BOOL) hasCarrierId {
  return resultDevice.hasCarrierId;
}
- (SInt32) carrierId {
  return resultDevice.carrierId;
}
- (RequestDeviceBuilder*) setCarrierId:(SInt32) value {
  resultDevice.hasCarrierId = YES;
  resultDevice.carrierId = value;
  return self;
}
- (RequestDeviceBuilder*) clearCarrierId {
  resultDevice.hasCarrierId = NO;
  resultDevice.carrierId = 0;
  return self;
}
@end

@interface RequestApp ()
@property (strong) NSString* appKey;
@end

@implementation RequestApp

- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) _value_ {
  hasAppKey_ = !!_value_;
}
@synthesize appKey;
- (instancetype) init {
  if ((self = [super init])) {
    self.appKey = @"";
  }
  return self;
}
static RequestApp* defaultRequestAppInstance = nil;
+ (void) initialize {
  if (self == [RequestApp class]) {
    defaultRequestAppInstance = [[RequestApp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestAppInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestAppInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAppKey) {
    [output writeString:1 value:self.appKey];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAppKey) {
    size_ += computeStringSize(1, self.appKey);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestApp*) parseFromData:(NSData*) data {
  return (RequestApp*)[[[RequestApp builder] mergeFromData:data] build];
}
+ (RequestApp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestApp*)[[[RequestApp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestApp*) parseFromInputStream:(NSInputStream*) input {
  return (RequestApp*)[[[RequestApp builder] mergeFromInputStream:input] build];
}
+ (RequestApp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestApp*)[[[RequestApp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestApp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestApp*)[[[RequestApp builder] mergeFromCodedInputStream:input] build];
}
+ (RequestApp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestApp*)[[[RequestApp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestAppBuilder*) builder {
  return [[RequestAppBuilder alloc] init];
}
+ (RequestAppBuilder*) builderWithPrototype:(RequestApp*) prototype {
  return [[RequestApp builder] mergeFrom:prototype];
}
- (RequestAppBuilder*) builder {
  return [RequestApp builder];
}
- (RequestAppBuilder*) toBuilder {
  return [RequestApp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAppKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAppKey) {
    [dictionary setObject: self.appKey forKey: @"appKey"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestApp class]]) {
    return NO;
  }
  RequestApp *otherMessage = other;
  return
      self.hasAppKey == otherMessage.hasAppKey &&
      (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAppKey) {
    hashCode = hashCode * 31 + [self.appKey hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestAppBuilder()
@property (strong) RequestApp* resultApp;
@end

@implementation RequestAppBuilder
@synthesize resultApp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultApp = [[RequestApp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultApp;
}
- (RequestAppBuilder*) clear {
  self.resultApp = [[RequestApp alloc] init];
  return self;
}
- (RequestAppBuilder*) clone {
  return [RequestApp builderWithPrototype:resultApp];
}
- (RequestApp*) defaultInstance {
  return [RequestApp defaultInstance];
}
- (RequestApp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestApp*) buildPartial {
  RequestApp* returnMe = resultApp;
  self.resultApp = nil;
  return returnMe;
}
- (RequestAppBuilder*) mergeFrom:(RequestApp*) other {
  if (other == [RequestApp defaultInstance]) {
    return self;
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestAppBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestAppBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAppKey:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAppKey {
  return resultApp.hasAppKey;
}
- (NSString*) appKey {
  return resultApp.appKey;
}
- (RequestAppBuilder*) setAppKey:(NSString*) value {
  resultApp.hasAppKey = YES;
  resultApp.appKey = value;
  return self;
}
- (RequestAppBuilder*) clearAppKey {
  resultApp.hasAppKey = NO;
  resultApp.appKey = @"";
  return self;
}
@end

@interface RequestUser ()
@property (strong) NSString* phoneNumber;
@property (strong) NSString* imei;
@property (strong) NSString* mac;
@property (strong) NSString* openuuid;
@property (strong) NSString* idfa;
@property (strong) NSString* androidId;
@property (strong) NSString* appUserId;
@end

@implementation RequestUser

- (BOOL) hasPhoneNumber {
  return !!hasPhoneNumber_;
}
- (void) setHasPhoneNumber:(BOOL) _value_ {
  hasPhoneNumber_ = !!_value_;
}
@synthesize phoneNumber;
- (BOOL) hasImei {
  return !!hasImei_;
}
- (void) setHasImei:(BOOL) _value_ {
  hasImei_ = !!_value_;
}
@synthesize imei;
- (BOOL) hasMac {
  return !!hasMac_;
}
- (void) setHasMac:(BOOL) _value_ {
  hasMac_ = !!_value_;
}
@synthesize mac;
- (BOOL) hasOpenuuid {
  return !!hasOpenuuid_;
}
- (void) setHasOpenuuid:(BOOL) _value_ {
  hasOpenuuid_ = !!_value_;
}
@synthesize openuuid;
- (BOOL) hasIdfa {
  return !!hasIdfa_;
}
- (void) setHasIdfa:(BOOL) _value_ {
  hasIdfa_ = !!_value_;
}
@synthesize idfa;
- (BOOL) hasAndroidId {
  return !!hasAndroidId_;
}
- (void) setHasAndroidId:(BOOL) _value_ {
  hasAndroidId_ = !!_value_;
}
@synthesize androidId;
- (BOOL) hasAppUserId {
  return !!hasAppUserId_;
}
- (void) setHasAppUserId:(BOOL) _value_ {
  hasAppUserId_ = !!_value_;
}
@synthesize appUserId;
- (instancetype) init {
  if ((self = [super init])) {
    self.phoneNumber = @"";
    self.imei = @"";
    self.mac = @"";
    self.openuuid = @"";
    self.idfa = @"";
    self.androidId = @"";
    self.appUserId = @"";
  }
  return self;
}
static RequestUser* defaultRequestUserInstance = nil;
+ (void) initialize {
  if (self == [RequestUser class]) {
    defaultRequestUserInstance = [[RequestUser alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestUserInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestUserInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPhoneNumber) {
    [output writeString:1 value:self.phoneNumber];
  }
  if (self.hasImei) {
    [output writeString:2 value:self.imei];
  }
  if (self.hasMac) {
    [output writeString:3 value:self.mac];
  }
  if (self.hasOpenuuid) {
    [output writeString:4 value:self.openuuid];
  }
  if (self.hasIdfa) {
    [output writeString:5 value:self.idfa];
  }
  if (self.hasAndroidId) {
    [output writeString:6 value:self.androidId];
  }
  if (self.hasAppUserId) {
    [output writeString:7 value:self.appUserId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPhoneNumber) {
    size_ += computeStringSize(1, self.phoneNumber);
  }
  if (self.hasImei) {
    size_ += computeStringSize(2, self.imei);
  }
  if (self.hasMac) {
    size_ += computeStringSize(3, self.mac);
  }
  if (self.hasOpenuuid) {
    size_ += computeStringSize(4, self.openuuid);
  }
  if (self.hasIdfa) {
    size_ += computeStringSize(5, self.idfa);
  }
  if (self.hasAndroidId) {
    size_ += computeStringSize(6, self.androidId);
  }
  if (self.hasAppUserId) {
    size_ += computeStringSize(7, self.appUserId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestUser*) parseFromData:(NSData*) data {
  return (RequestUser*)[[[RequestUser builder] mergeFromData:data] build];
}
+ (RequestUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestUser*)[[[RequestUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestUser*) parseFromInputStream:(NSInputStream*) input {
  return (RequestUser*)[[[RequestUser builder] mergeFromInputStream:input] build];
}
+ (RequestUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestUser*)[[[RequestUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestUser*)[[[RequestUser builder] mergeFromCodedInputStream:input] build];
}
+ (RequestUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestUser*)[[[RequestUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestUserBuilder*) builder {
  return [[RequestUserBuilder alloc] init];
}
+ (RequestUserBuilder*) builderWithPrototype:(RequestUser*) prototype {
  return [[RequestUser builder] mergeFrom:prototype];
}
- (RequestUserBuilder*) builder {
  return [RequestUser builder];
}
- (RequestUserBuilder*) toBuilder {
  return [RequestUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPhoneNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneNumber", self.phoneNumber];
  }
  if (self.hasImei) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imei", self.imei];
  }
  if (self.hasMac) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mac", self.mac];
  }
  if (self.hasOpenuuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"openuuid", self.openuuid];
  }
  if (self.hasIdfa) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idfa", self.idfa];
  }
  if (self.hasAndroidId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"androidId", self.androidId];
  }
  if (self.hasAppUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appUserId", self.appUserId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPhoneNumber) {
    [dictionary setObject: self.phoneNumber forKey: @"phoneNumber"];
  }
  if (self.hasImei) {
    [dictionary setObject: self.imei forKey: @"imei"];
  }
  if (self.hasMac) {
    [dictionary setObject: self.mac forKey: @"mac"];
  }
  if (self.hasOpenuuid) {
    [dictionary setObject: self.openuuid forKey: @"openuuid"];
  }
  if (self.hasIdfa) {
    [dictionary setObject: self.idfa forKey: @"idfa"];
  }
  if (self.hasAndroidId) {
    [dictionary setObject: self.androidId forKey: @"androidId"];
  }
  if (self.hasAppUserId) {
    [dictionary setObject: self.appUserId forKey: @"appUserId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestUser class]]) {
    return NO;
  }
  RequestUser *otherMessage = other;
  return
      self.hasPhoneNumber == otherMessage.hasPhoneNumber &&
      (!self.hasPhoneNumber || [self.phoneNumber isEqual:otherMessage.phoneNumber]) &&
      self.hasImei == otherMessage.hasImei &&
      (!self.hasImei || [self.imei isEqual:otherMessage.imei]) &&
      self.hasMac == otherMessage.hasMac &&
      (!self.hasMac || [self.mac isEqual:otherMessage.mac]) &&
      self.hasOpenuuid == otherMessage.hasOpenuuid &&
      (!self.hasOpenuuid || [self.openuuid isEqual:otherMessage.openuuid]) &&
      self.hasIdfa == otherMessage.hasIdfa &&
      (!self.hasIdfa || [self.idfa isEqual:otherMessage.idfa]) &&
      self.hasAndroidId == otherMessage.hasAndroidId &&
      (!self.hasAndroidId || [self.androidId isEqual:otherMessage.androidId]) &&
      self.hasAppUserId == otherMessage.hasAppUserId &&
      (!self.hasAppUserId || [self.appUserId isEqual:otherMessage.appUserId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPhoneNumber) {
    hashCode = hashCode * 31 + [self.phoneNumber hash];
  }
  if (self.hasImei) {
    hashCode = hashCode * 31 + [self.imei hash];
  }
  if (self.hasMac) {
    hashCode = hashCode * 31 + [self.mac hash];
  }
  if (self.hasOpenuuid) {
    hashCode = hashCode * 31 + [self.openuuid hash];
  }
  if (self.hasIdfa) {
    hashCode = hashCode * 31 + [self.idfa hash];
  }
  if (self.hasAndroidId) {
    hashCode = hashCode * 31 + [self.androidId hash];
  }
  if (self.hasAppUserId) {
    hashCode = hashCode * 31 + [self.appUserId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestUserBuilder()
@property (strong) RequestUser* resultUser;
@end

@implementation RequestUserBuilder
@synthesize resultUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUser = [[RequestUser alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUser;
}
- (RequestUserBuilder*) clear {
  self.resultUser = [[RequestUser alloc] init];
  return self;
}
- (RequestUserBuilder*) clone {
  return [RequestUser builderWithPrototype:resultUser];
}
- (RequestUser*) defaultInstance {
  return [RequestUser defaultInstance];
}
- (RequestUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestUser*) buildPartial {
  RequestUser* returnMe = resultUser;
  self.resultUser = nil;
  return returnMe;
}
- (RequestUserBuilder*) mergeFrom:(RequestUser*) other {
  if (other == [RequestUser defaultInstance]) {
    return self;
  }
  if (other.hasPhoneNumber) {
    [self setPhoneNumber:other.phoneNumber];
  }
  if (other.hasImei) {
    [self setImei:other.imei];
  }
  if (other.hasMac) {
    [self setMac:other.mac];
  }
  if (other.hasOpenuuid) {
    [self setOpenuuid:other.openuuid];
  }
  if (other.hasIdfa) {
    [self setIdfa:other.idfa];
  }
  if (other.hasAndroidId) {
    [self setAndroidId:other.androidId];
  }
  if (other.hasAppUserId) {
    [self setAppUserId:other.appUserId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPhoneNumber:[input readString]];
        break;
      }
      case 18: {
        [self setImei:[input readString]];
        break;
      }
      case 26: {
        [self setMac:[input readString]];
        break;
      }
      case 34: {
        [self setOpenuuid:[input readString]];
        break;
      }
      case 42: {
        [self setIdfa:[input readString]];
        break;
      }
      case 50: {
        [self setAndroidId:[input readString]];
        break;
      }
      case 58: {
        [self setAppUserId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPhoneNumber {
  return resultUser.hasPhoneNumber;
}
- (NSString*) phoneNumber {
  return resultUser.phoneNumber;
}
- (RequestUserBuilder*) setPhoneNumber:(NSString*) value {
  resultUser.hasPhoneNumber = YES;
  resultUser.phoneNumber = value;
  return self;
}
- (RequestUserBuilder*) clearPhoneNumber {
  resultUser.hasPhoneNumber = NO;
  resultUser.phoneNumber = @"";
  return self;
}
- (BOOL) hasImei {
  return resultUser.hasImei;
}
- (NSString*) imei {
  return resultUser.imei;
}
- (RequestUserBuilder*) setImei:(NSString*) value {
  resultUser.hasImei = YES;
  resultUser.imei = value;
  return self;
}
- (RequestUserBuilder*) clearImei {
  resultUser.hasImei = NO;
  resultUser.imei = @"";
  return self;
}
- (BOOL) hasMac {
  return resultUser.hasMac;
}
- (NSString*) mac {
  return resultUser.mac;
}
- (RequestUserBuilder*) setMac:(NSString*) value {
  resultUser.hasMac = YES;
  resultUser.mac = value;
  return self;
}
- (RequestUserBuilder*) clearMac {
  resultUser.hasMac = NO;
  resultUser.mac = @"";
  return self;
}
- (BOOL) hasOpenuuid {
  return resultUser.hasOpenuuid;
}
- (NSString*) openuuid {
  return resultUser.openuuid;
}
- (RequestUserBuilder*) setOpenuuid:(NSString*) value {
  resultUser.hasOpenuuid = YES;
  resultUser.openuuid = value;
  return self;
}
- (RequestUserBuilder*) clearOpenuuid {
  resultUser.hasOpenuuid = NO;
  resultUser.openuuid = @"";
  return self;
}
- (BOOL) hasIdfa {
  return resultUser.hasIdfa;
}
- (NSString*) idfa {
  return resultUser.idfa;
}
- (RequestUserBuilder*) setIdfa:(NSString*) value {
  resultUser.hasIdfa = YES;
  resultUser.idfa = value;
  return self;
}
- (RequestUserBuilder*) clearIdfa {
  resultUser.hasIdfa = NO;
  resultUser.idfa = @"";
  return self;
}
- (BOOL) hasAndroidId {
  return resultUser.hasAndroidId;
}
- (NSString*) androidId {
  return resultUser.androidId;
}
- (RequestUserBuilder*) setAndroidId:(NSString*) value {
  resultUser.hasAndroidId = YES;
  resultUser.androidId = value;
  return self;
}
- (RequestUserBuilder*) clearAndroidId {
  resultUser.hasAndroidId = NO;
  resultUser.androidId = @"";
  return self;
}
- (BOOL) hasAppUserId {
  return resultUser.hasAppUserId;
}
- (NSString*) appUserId {
  return resultUser.appUserId;
}
- (RequestUserBuilder*) setAppUserId:(NSString*) value {
  resultUser.hasAppUserId = YES;
  resultUser.appUserId = value;
  return self;
}
- (RequestUserBuilder*) clearAppUserId {
  resultUser.hasAppUserId = NO;
  resultUser.appUserId = @"";
  return self;
}
@end

@interface RequestSDK ()
@property (strong) NSString* sdkVersion;
@property SInt32 timestamp;
@property (strong) NSString* checkcode;
@end

@implementation RequestSDK

- (BOOL) hasSdkVersion {
  return !!hasSdkVersion_;
}
- (void) setHasSdkVersion:(BOOL) _value_ {
  hasSdkVersion_ = !!_value_;
}
@synthesize sdkVersion;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasCheckcode {
  return !!hasCheckcode_;
}
- (void) setHasCheckcode:(BOOL) _value_ {
  hasCheckcode_ = !!_value_;
}
@synthesize checkcode;
- (instancetype) init {
  if ((self = [super init])) {
    self.sdkVersion = @"";
    self.timestamp = 0;
    self.checkcode = @"";
  }
  return self;
}
static RequestSDK* defaultRequestSDKInstance = nil;
+ (void) initialize {
  if (self == [RequestSDK class]) {
    defaultRequestSDKInstance = [[RequestSDK alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestSDKInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestSDKInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSdkVersion) {
    [output writeString:1 value:self.sdkVersion];
  }
  if (self.hasTimestamp) {
    [output writeInt32:2 value:self.timestamp];
  }
  if (self.hasCheckcode) {
    [output writeString:3 value:self.checkcode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSdkVersion) {
    size_ += computeStringSize(1, self.sdkVersion);
  }
  if (self.hasTimestamp) {
    size_ += computeInt32Size(2, self.timestamp);
  }
  if (self.hasCheckcode) {
    size_ += computeStringSize(3, self.checkcode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestSDK*) parseFromData:(NSData*) data {
  return (RequestSDK*)[[[RequestSDK builder] mergeFromData:data] build];
}
+ (RequestSDK*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestSDK*)[[[RequestSDK builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestSDK*) parseFromInputStream:(NSInputStream*) input {
  return (RequestSDK*)[[[RequestSDK builder] mergeFromInputStream:input] build];
}
+ (RequestSDK*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestSDK*)[[[RequestSDK builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestSDK*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestSDK*)[[[RequestSDK builder] mergeFromCodedInputStream:input] build];
}
+ (RequestSDK*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestSDK*)[[[RequestSDK builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestSDKBuilder*) builder {
  return [[RequestSDKBuilder alloc] init];
}
+ (RequestSDKBuilder*) builderWithPrototype:(RequestSDK*) prototype {
  return [[RequestSDK builder] mergeFrom:prototype];
}
- (RequestSDKBuilder*) builder {
  return [RequestSDK builder];
}
- (RequestSDKBuilder*) toBuilder {
  return [RequestSDK builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSdkVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sdkVersion", self.sdkVersion];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithInteger:self.timestamp]];
  }
  if (self.hasCheckcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"checkcode", self.checkcode];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSdkVersion) {
    [dictionary setObject: self.sdkVersion forKey: @"sdkVersion"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithInteger:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasCheckcode) {
    [dictionary setObject: self.checkcode forKey: @"checkcode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestSDK class]]) {
    return NO;
  }
  RequestSDK *otherMessage = other;
  return
      self.hasSdkVersion == otherMessage.hasSdkVersion &&
      (!self.hasSdkVersion || [self.sdkVersion isEqual:otherMessage.sdkVersion]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasCheckcode == otherMessage.hasCheckcode &&
      (!self.hasCheckcode || [self.checkcode isEqual:otherMessage.checkcode]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSdkVersion) {
    hashCode = hashCode * 31 + [self.sdkVersion hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.timestamp] hash];
  }
  if (self.hasCheckcode) {
    hashCode = hashCode * 31 + [self.checkcode hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestSDKBuilder()
@property (strong) RequestSDK* resultSdk;
@end

@implementation RequestSDKBuilder
@synthesize resultSdk;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSdk = [[RequestSDK alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSdk;
}
- (RequestSDKBuilder*) clear {
  self.resultSdk = [[RequestSDK alloc] init];
  return self;
}
- (RequestSDKBuilder*) clone {
  return [RequestSDK builderWithPrototype:resultSdk];
}
- (RequestSDK*) defaultInstance {
  return [RequestSDK defaultInstance];
}
- (RequestSDK*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestSDK*) buildPartial {
  RequestSDK* returnMe = resultSdk;
  self.resultSdk = nil;
  return returnMe;
}
- (RequestSDKBuilder*) mergeFrom:(RequestSDK*) other {
  if (other == [RequestSDK defaultInstance]) {
    return self;
  }
  if (other.hasSdkVersion) {
    [self setSdkVersion:other.sdkVersion];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasCheckcode) {
    [self setCheckcode:other.checkcode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestSDKBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestSDKBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSdkVersion:[input readString]];
        break;
      }
      case 16: {
        [self setTimestamp:[input readInt32]];
        break;
      }
      case 26: {
        [self setCheckcode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSdkVersion {
  return resultSdk.hasSdkVersion;
}
- (NSString*) sdkVersion {
  return resultSdk.sdkVersion;
}
- (RequestSDKBuilder*) setSdkVersion:(NSString*) value {
  resultSdk.hasSdkVersion = YES;
  resultSdk.sdkVersion = value;
  return self;
}
- (RequestSDKBuilder*) clearSdkVersion {
  resultSdk.hasSdkVersion = NO;
  resultSdk.sdkVersion = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return resultSdk.hasTimestamp;
}
- (SInt32) timestamp {
  return resultSdk.timestamp;
}
- (RequestSDKBuilder*) setTimestamp:(SInt32) value {
  resultSdk.hasTimestamp = YES;
  resultSdk.timestamp = value;
  return self;
}
- (RequestSDKBuilder*) clearTimestamp {
  resultSdk.hasTimestamp = NO;
  resultSdk.timestamp = 0;
  return self;
}
- (BOOL) hasCheckcode {
  return resultSdk.hasCheckcode;
}
- (NSString*) checkcode {
  return resultSdk.checkcode;
}
- (RequestSDKBuilder*) setCheckcode:(NSString*) value {
  resultSdk.hasCheckcode = YES;
  resultSdk.checkcode = value;
  return self;
}
- (RequestSDKBuilder*) clearCheckcode {
  resultSdk.hasCheckcode = NO;
  resultSdk.checkcode = @"";
  return self;
}
@end

@interface RequestImpression ()
@property (strong) NSString* impId;
@property (strong) NSString* adspaceId;
@property (strong) NSString* adCount;
@end

@implementation RequestImpression

- (BOOL) hasImpId {
  return !!hasImpId_;
}
- (void) setHasImpId:(BOOL) _value_ {
  hasImpId_ = !!_value_;
}
@synthesize impId;
- (BOOL) hasAdspaceId {
  return !!hasAdspaceId_;
}
- (void) setHasAdspaceId:(BOOL) _value_ {
  hasAdspaceId_ = !!_value_;
}
@synthesize adspaceId;
- (BOOL) hasAdCount {
  return !!hasAdCount_;
}
- (void) setHasAdCount:(BOOL) _value_ {
  hasAdCount_ = !!_value_;
}
@synthesize adCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.impId = @"";
    self.adspaceId = @"";
    self.adCount = @"";
  }
  return self;
}
static RequestImpression* defaultRequestImpressionInstance = nil;
+ (void) initialize {
  if (self == [RequestImpression class]) {
    defaultRequestImpressionInstance = [[RequestImpression alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestImpressionInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestImpressionInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasImpId) {
    [output writeString:1 value:self.impId];
  }
  if (self.hasAdspaceId) {
    [output writeString:2 value:self.adspaceId];
  }
  if (self.hasAdCount) {
    [output writeString:3 value:self.adCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasImpId) {
    size_ += computeStringSize(1, self.impId);
  }
  if (self.hasAdspaceId) {
    size_ += computeStringSize(2, self.adspaceId);
  }
  if (self.hasAdCount) {
    size_ += computeStringSize(3, self.adCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestImpression*) parseFromData:(NSData*) data {
  return (RequestImpression*)[[[RequestImpression builder] mergeFromData:data] build];
}
+ (RequestImpression*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestImpression*)[[[RequestImpression builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestImpression*) parseFromInputStream:(NSInputStream*) input {
  return (RequestImpression*)[[[RequestImpression builder] mergeFromInputStream:input] build];
}
+ (RequestImpression*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestImpression*)[[[RequestImpression builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestImpression*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestImpression*)[[[RequestImpression builder] mergeFromCodedInputStream:input] build];
}
+ (RequestImpression*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestImpression*)[[[RequestImpression builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestImpressionBuilder*) builder {
  return [[RequestImpressionBuilder alloc] init];
}
+ (RequestImpressionBuilder*) builderWithPrototype:(RequestImpression*) prototype {
  return [[RequestImpression builder] mergeFrom:prototype];
}
- (RequestImpressionBuilder*) builder {
  return [RequestImpression builder];
}
- (RequestImpressionBuilder*) toBuilder {
  return [RequestImpression builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasImpId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"impId", self.impId];
  }
  if (self.hasAdspaceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"adspaceId", self.adspaceId];
  }
  if (self.hasAdCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"adCount", self.adCount];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasImpId) {
    [dictionary setObject: self.impId forKey: @"impId"];
  }
  if (self.hasAdspaceId) {
    [dictionary setObject: self.adspaceId forKey: @"adspaceId"];
  }
  if (self.hasAdCount) {
    [dictionary setObject: self.adCount forKey: @"adCount"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestImpression class]]) {
    return NO;
  }
  RequestImpression *otherMessage = other;
  return
      self.hasImpId == otherMessage.hasImpId &&
      (!self.hasImpId || [self.impId isEqual:otherMessage.impId]) &&
      self.hasAdspaceId == otherMessage.hasAdspaceId &&
      (!self.hasAdspaceId || [self.adspaceId isEqual:otherMessage.adspaceId]) &&
      self.hasAdCount == otherMessage.hasAdCount &&
      (!self.hasAdCount || [self.adCount isEqual:otherMessage.adCount]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasImpId) {
    hashCode = hashCode * 31 + [self.impId hash];
  }
  if (self.hasAdspaceId) {
    hashCode = hashCode * 31 + [self.adspaceId hash];
  }
  if (self.hasAdCount) {
    hashCode = hashCode * 31 + [self.adCount hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestImpressionBuilder()
@property (strong) RequestImpression* resultImpression;
@end

@implementation RequestImpressionBuilder
@synthesize resultImpression;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImpression = [[RequestImpression alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImpression;
}
- (RequestImpressionBuilder*) clear {
  self.resultImpression = [[RequestImpression alloc] init];
  return self;
}
- (RequestImpressionBuilder*) clone {
  return [RequestImpression builderWithPrototype:resultImpression];
}
- (RequestImpression*) defaultInstance {
  return [RequestImpression defaultInstance];
}
- (RequestImpression*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestImpression*) buildPartial {
  RequestImpression* returnMe = resultImpression;
  self.resultImpression = nil;
  return returnMe;
}
- (RequestImpressionBuilder*) mergeFrom:(RequestImpression*) other {
  if (other == [RequestImpression defaultInstance]) {
    return self;
  }
  if (other.hasImpId) {
    [self setImpId:other.impId];
  }
  if (other.hasAdspaceId) {
    [self setAdspaceId:other.adspaceId];
  }
  if (other.hasAdCount) {
    [self setAdCount:other.adCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestImpressionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestImpressionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setImpId:[input readString]];
        break;
      }
      case 18: {
        [self setAdspaceId:[input readString]];
        break;
      }
      case 26: {
        [self setAdCount:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasImpId {
  return resultImpression.hasImpId;
}
- (NSString*) impId {
  return resultImpression.impId;
}
- (RequestImpressionBuilder*) setImpId:(NSString*) value {
  resultImpression.hasImpId = YES;
  resultImpression.impId = value;
  return self;
}
- (RequestImpressionBuilder*) clearImpId {
  resultImpression.hasImpId = NO;
  resultImpression.impId = @"";
  return self;
}
- (BOOL) hasAdspaceId {
  return resultImpression.hasAdspaceId;
}
- (NSString*) adspaceId {
  return resultImpression.adspaceId;
}
- (RequestImpressionBuilder*) setAdspaceId:(NSString*) value {
  resultImpression.hasAdspaceId = YES;
  resultImpression.adspaceId = value;
  return self;
}
- (RequestImpressionBuilder*) clearAdspaceId {
  resultImpression.hasAdspaceId = NO;
  resultImpression.adspaceId = @"";
  return self;
}
- (BOOL) hasAdCount {
  return resultImpression.hasAdCount;
}
- (NSString*) adCount {
  return resultImpression.adCount;
}
- (RequestImpressionBuilder*) setAdCount:(NSString*) value {
  resultImpression.hasAdCount = YES;
  resultImpression.adCount = value;
  return self;
}
- (RequestImpressionBuilder*) clearAdCount {
  resultImpression.hasAdCount = NO;
  resultImpression.adCount = @"";
  return self;
}
@end

@interface RequestBuilder()
@property (strong) Request* resultRequest;
@end

@implementation RequestBuilder
@synthesize resultRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequest = [[Request alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequest;
}
- (RequestBuilder*) clear {
  self.resultRequest = [[Request alloc] init];
  return self;
}
- (RequestBuilder*) clone {
  return [Request builderWithPrototype:resultRequest];
}
- (Request*) defaultInstance {
  return [Request defaultInstance];
}
- (Request*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Request*) buildPartial {
  Request* returnMe = resultRequest;
  self.resultRequest = nil;
  return returnMe;
}
- (RequestBuilder*) mergeFrom:(Request*) other {
  if (other == [Request defaultInstance]) {
    return self;
  }
  if (other.hasEventId) {
    [self setEventId:other.eventId];
  }
  if (other.hasTestType) {
    [self setTestType:other.testType];
  }
  if (other.hasDevice) {
    [self mergeDevice:other.device];
  }
  if (other.hasApp) {
    [self mergeApp:other.app];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasSdk) {
    [self mergeSdk:other.sdk];
  }
  if (other.hasImpression) {
    [self mergeImpression:other.impression];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventId:[input readString]];
        break;
      }
      case 16: {
        RequestTestType value = (RequestTestType)[input readEnum];
        if (RequestTestTypeIsValidValue(value)) {
          [self setTestType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 34: {
        RequestDeviceBuilder* subBuilder = [RequestDevice builder];
        if (self.hasDevice) {
          [subBuilder mergeFrom:self.device];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDevice:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        RequestAppBuilder* subBuilder = [RequestApp builder];
        if (self.hasApp) {
          [subBuilder mergeFrom:self.app];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setApp:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        RequestUserBuilder* subBuilder = [RequestUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        RequestSDKBuilder* subBuilder = [RequestSDK builder];
        if (self.hasSdk) {
          [subBuilder mergeFrom:self.sdk];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSdk:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        RequestImpressionBuilder* subBuilder = [RequestImpression builder];
        if (self.hasImpression) {
          [subBuilder mergeFrom:self.impression];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setImpression:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasEventId {
  return resultRequest.hasEventId;
}
- (NSString*) eventId {
  return resultRequest.eventId;
}
- (RequestBuilder*) setEventId:(NSString*) value {
  resultRequest.hasEventId = YES;
  resultRequest.eventId = value;
  return self;
}
- (RequestBuilder*) clearEventId {
  resultRequest.hasEventId = NO;
  resultRequest.eventId = @"";
  return self;
}
- (BOOL) hasTestType {
  return resultRequest.hasTestType;
}
- (RequestTestType) testType {
  return resultRequest.testType;
}
- (RequestBuilder*) setTestType:(RequestTestType) value {
  resultRequest.hasTestType = YES;
  resultRequest.testType = value;
  return self;
}
- (RequestBuilder*) clearTestType {
  resultRequest.hasTestType = NO;
  resultRequest.testType = RequestTestTypeKDevelpoment;
  return self;
}
- (BOOL) hasDevice {
  return resultRequest.hasDevice;
}
- (RequestDevice*) device {
  return resultRequest.device;
}
- (RequestBuilder*) setDevice:(RequestDevice*) value {
  resultRequest.hasDevice = YES;
  resultRequest.device = value;
  return self;
}
- (RequestBuilder*) setDeviceBuilder:(RequestDeviceBuilder*) builderForValue {
  return [self setDevice:[builderForValue build]];
}
- (RequestBuilder*) mergeDevice:(RequestDevice*) value {
  if (resultRequest.hasDevice &&
      resultRequest.device != [RequestDevice defaultInstance]) {
    resultRequest.device =
      [[[RequestDevice builderWithPrototype:resultRequest.device] mergeFrom:value] buildPartial];
  } else {
    resultRequest.device = value;
  }
  resultRequest.hasDevice = YES;
  return self;
}
- (RequestBuilder*) clearDevice {
  resultRequest.hasDevice = NO;
  resultRequest.device = [RequestDevice defaultInstance];
  return self;
}
- (BOOL) hasApp {
  return resultRequest.hasApp;
}
- (RequestApp*) app {
  return resultRequest.app;
}
- (RequestBuilder*) setApp:(RequestApp*) value {
  resultRequest.hasApp = YES;
  resultRequest.app = value;
  return self;
}
- (RequestBuilder*) setAppBuilder:(RequestAppBuilder*) builderForValue {
  return [self setApp:[builderForValue build]];
}
- (RequestBuilder*) mergeApp:(RequestApp*) value {
  if (resultRequest.hasApp &&
      resultRequest.app != [RequestApp defaultInstance]) {
    resultRequest.app =
      [[[RequestApp builderWithPrototype:resultRequest.app] mergeFrom:value] buildPartial];
  } else {
    resultRequest.app = value;
  }
  resultRequest.hasApp = YES;
  return self;
}
- (RequestBuilder*) clearApp {
  resultRequest.hasApp = NO;
  resultRequest.app = [RequestApp defaultInstance];
  return self;
}
- (BOOL) hasUser {
  return resultRequest.hasUser;
}
- (RequestUser*) user {
  return resultRequest.user;
}
- (RequestBuilder*) setUser:(RequestUser*) value {
  resultRequest.hasUser = YES;
  resultRequest.user = value;
  return self;
}
- (RequestBuilder*) setUserBuilder:(RequestUserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (RequestBuilder*) mergeUser:(RequestUser*) value {
  if (resultRequest.hasUser &&
      resultRequest.user != [RequestUser defaultInstance]) {
    resultRequest.user =
      [[[RequestUser builderWithPrototype:resultRequest.user] mergeFrom:value] buildPartial];
  } else {
    resultRequest.user = value;
  }
  resultRequest.hasUser = YES;
  return self;
}
- (RequestBuilder*) clearUser {
  resultRequest.hasUser = NO;
  resultRequest.user = [RequestUser defaultInstance];
  return self;
}
- (BOOL) hasSdk {
  return resultRequest.hasSdk;
}
- (RequestSDK*) sdk {
  return resultRequest.sdk;
}
- (RequestBuilder*) setSdk:(RequestSDK*) value {
  resultRequest.hasSdk = YES;
  resultRequest.sdk = value;
  return self;
}
- (RequestBuilder*) setSdkBuilder:(RequestSDKBuilder*) builderForValue {
  return [self setSdk:[builderForValue build]];
}
- (RequestBuilder*) mergeSdk:(RequestSDK*) value {
  if (resultRequest.hasSdk &&
      resultRequest.sdk != [RequestSDK defaultInstance]) {
    resultRequest.sdk =
      [[[RequestSDK builderWithPrototype:resultRequest.sdk] mergeFrom:value] buildPartial];
  } else {
    resultRequest.sdk = value;
  }
  resultRequest.hasSdk = YES;
  return self;
}
- (RequestBuilder*) clearSdk {
  resultRequest.hasSdk = NO;
  resultRequest.sdk = [RequestSDK defaultInstance];
  return self;
}
- (BOOL) hasImpression {
  return resultRequest.hasImpression;
}
- (RequestImpression*) impression {
  return resultRequest.impression;
}
- (RequestBuilder*) setImpression:(RequestImpression*) value {
  resultRequest.hasImpression = YES;
  resultRequest.impression = value;
  return self;
}
- (RequestBuilder*) setImpressionBuilder:(RequestImpressionBuilder*) builderForValue {
  return [self setImpression:[builderForValue build]];
}
- (RequestBuilder*) mergeImpression:(RequestImpression*) value {
  if (resultRequest.hasImpression &&
      resultRequest.impression != [RequestImpression defaultInstance]) {
    resultRequest.impression =
      [[[RequestImpression builderWithPrototype:resultRequest.impression] mergeFrom:value] buildPartial];
  } else {
    resultRequest.impression = value;
  }
  resultRequest.hasImpression = YES;
  return self;
}
- (RequestBuilder*) clearImpression {
  resultRequest.hasImpression = NO;
  resultRequest.impression = [RequestImpression defaultInstance];
  return self;
}
@end

@interface Response ()
@property (strong) NSString* eventId;
@property (strong) NSMutableArray * impAdsArray;
@end

@implementation Response

- (BOOL) hasEventId {
  return !!hasEventId_;
}
- (void) setHasEventId:(BOOL) _value_ {
  hasEventId_ = !!_value_;
}
@synthesize eventId;
@synthesize impAdsArray;
@dynamic impAds;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventId = @"";
  }
  return self;
}
static Response* defaultResponseInstance = nil;
+ (void) initialize {
  if (self == [Response class]) {
    defaultResponseInstance = [[Response alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseInstance;
}
- (NSArray *)impAds {
  return impAdsArray;
}
- (ResponseImpressionAd*)impAdsAtIndex:(NSUInteger)index {
  return [impAdsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventId) {
    [output writeString:1 value:self.eventId];
  }
  [self.impAdsArray enumerateObjectsUsingBlock:^(ResponseImpressionAd *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventId) {
    size_ += computeStringSize(1, self.eventId);
  }
  [self.impAdsArray enumerateObjectsUsingBlock:^(ResponseImpressionAd *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Response*) parseFromData:(NSData*) data {
  return (Response*)[[[Response builder] mergeFromData:data] build];
}
+ (Response*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Response*)[[[Response builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Response*) parseFromInputStream:(NSInputStream*) input {
  return (Response*)[[[Response builder] mergeFromInputStream:input] build];
}
+ (Response*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Response*)[[[Response builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Response*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Response*)[[[Response builder] mergeFromCodedInputStream:input] build];
}
+ (Response*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Response*)[[[Response builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseBuilder*) builder {
  return [[ResponseBuilder alloc] init];
}
+ (ResponseBuilder*) builderWithPrototype:(Response*) prototype {
  return [[Response builder] mergeFrom:prototype];
}
- (ResponseBuilder*) builder {
  return [Response builder];
}
- (ResponseBuilder*) toBuilder {
  return [Response builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventId", self.eventId];
  }
  [self.impAdsArray enumerateObjectsUsingBlock:^(ResponseImpressionAd *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"impAds"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventId) {
    [dictionary setObject: self.eventId forKey: @"eventId"];
  }
    NSMutableArray *arr = [NSMutableArray array];
  for (ResponseImpressionAd* element in self.impAdsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
      [arr addObject:elementDictionary];
  }
    [dictionary setObject:[arr copy] forKey:@"impAds"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Response class]]) {
    return NO;
  }
  Response *otherMessage = other;
  return
      self.hasEventId == otherMessage.hasEventId &&
      (!self.hasEventId || [self.eventId isEqual:otherMessage.eventId]) &&
      [self.impAdsArray isEqualToArray:otherMessage.impAdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventId) {
    hashCode = hashCode * 31 + [self.eventId hash];
  }
  [self.impAdsArray enumerateObjectsUsingBlock:^(ResponseImpressionAd *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseImpressionAd ()
@property SInt32 expressionId;
@property ResponseImpressionAdADType adType;
@property (strong) NSMutableArray * showTrackingUrlsArray;
@property (strong) ResponseImpressionAdBannerAd* bannerAds;
@property (strong) ResponseImpressionAdApps* apps;
@end

@implementation ResponseImpressionAd

- (BOOL) hasExpressionId {
  return !!hasExpressionId_;
}
- (void) setHasExpressionId:(BOOL) _value_ {
  hasExpressionId_ = !!_value_;
}
@synthesize expressionId;
- (BOOL) hasAdType {
  return !!hasAdType_;
}
- (void) setHasAdType:(BOOL) _value_ {
  hasAdType_ = !!_value_;
}
@synthesize adType;
@synthesize showTrackingUrlsArray;
@dynamic showTrackingUrls;
- (BOOL) hasBannerAds {
  return !!hasBannerAds_;
}
- (void) setHasBannerAds:(BOOL) _value_ {
  hasBannerAds_ = !!_value_;
}
@synthesize bannerAds;
- (BOOL) hasApps {
  return !!hasApps_;
}
- (void) setHasApps:(BOOL) _value_ {
  hasApps_ = !!_value_;
}
@synthesize apps;
- (instancetype) init {
  if ((self = [super init])) {
    self.expressionId = 0;
    self.adType = ResponseImpressionAdADTypeKImgbanner;
    self.bannerAds = [ResponseImpressionAdBannerAd defaultInstance];
    self.apps = [ResponseImpressionAdApps defaultInstance];
  }
  return self;
}
static ResponseImpressionAd* defaultResponseImpressionAdInstance = nil;
+ (void) initialize {
  if (self == [ResponseImpressionAd class]) {
    defaultResponseImpressionAdInstance = [[ResponseImpressionAd alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseImpressionAdInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseImpressionAdInstance;
}
- (NSArray *)showTrackingUrls {
  return showTrackingUrlsArray;
}
- (NSString*)showTrackingUrlsAtIndex:(NSUInteger)index {
  return [showTrackingUrlsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasExpressionId) {
    [output writeInt32:1 value:self.expressionId];
  }
  if (self.hasAdType) {
    [output writeEnum:2 value:self.adType];
  }
  [self.showTrackingUrlsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:3 value:element];
  }];
  if (self.hasBannerAds) {
    [output writeMessage:4 value:self.bannerAds];
  }
  if (self.hasApps) {
    [output writeMessage:5 value:self.apps];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasExpressionId) {
    size_ += computeInt32Size(1, self.expressionId);
  }
  if (self.hasAdType) {
    size_ += computeEnumSize(2, self.adType);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.showTrackingUrlsArray.count;
    [self.showTrackingUrlsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasBannerAds) {
    size_ += computeMessageSize(4, self.bannerAds);
  }
  if (self.hasApps) {
    size_ += computeMessageSize(5, self.apps);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseImpressionAd*) parseFromData:(NSData*) data {
  return (ResponseImpressionAd*)[[[ResponseImpressionAd builder] mergeFromData:data] build];
}
+ (ResponseImpressionAd*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseImpressionAd*)[[[ResponseImpressionAd builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseImpressionAd*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseImpressionAd*)[[[ResponseImpressionAd builder] mergeFromInputStream:input] build];
}
+ (ResponseImpressionAd*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseImpressionAd*)[[[ResponseImpressionAd builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseImpressionAd*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseImpressionAd*)[[[ResponseImpressionAd builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseImpressionAd*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseImpressionAd*)[[[ResponseImpressionAd builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseImpressionAdBuilder*) builder {
  return [[ResponseImpressionAdBuilder alloc] init];
}
+ (ResponseImpressionAdBuilder*) builderWithPrototype:(ResponseImpressionAd*) prototype {
  return [[ResponseImpressionAd builder] mergeFrom:prototype];
}
- (ResponseImpressionAdBuilder*) builder {
  return [ResponseImpressionAd builder];
}
- (ResponseImpressionAdBuilder*) toBuilder {
  return [ResponseImpressionAd builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasExpressionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expressionId", [NSNumber numberWithInteger:self.expressionId]];
  }
  if (self.hasAdType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"adType", NSStringFromResponseImpressionAdADType(self.adType)];
  }
  [self.showTrackingUrlsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"showTrackingUrls", obj];
  }];
  if (self.hasBannerAds) {
    [output appendFormat:@"%@%@ {\n", indent, @"bannerAds"];
    [self.bannerAds writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasApps) {
    [output appendFormat:@"%@%@ {\n", indent, @"apps"];
    [self.apps writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasExpressionId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.expressionId] forKey: @"expressionId"];
  }
  if (self.hasAdType) {
    [dictionary setObject: @(self.adType) forKey: @"adType"];
  }
  [dictionary setObject:self.showTrackingUrls forKey: @"showTrackingUrls"];
  if (self.hasBannerAds) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.bannerAds storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"bannerAds"];
  }
  if (self.hasApps) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.apps storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"apps"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseImpressionAd class]]) {
    return NO;
  }
  ResponseImpressionAd *otherMessage = other;
  return
      self.hasExpressionId == otherMessage.hasExpressionId &&
      (!self.hasExpressionId || self.expressionId == otherMessage.expressionId) &&
      self.hasAdType == otherMessage.hasAdType &&
      (!self.hasAdType || self.adType == otherMessage.adType) &&
      [self.showTrackingUrlsArray isEqualToArray:otherMessage.showTrackingUrlsArray] &&
      self.hasBannerAds == otherMessage.hasBannerAds &&
      (!self.hasBannerAds || [self.bannerAds isEqual:otherMessage.bannerAds]) &&
      self.hasApps == otherMessage.hasApps &&
      (!self.hasApps || [self.apps isEqual:otherMessage.apps]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasExpressionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.expressionId] hash];
  }
  if (self.hasAdType) {
    hashCode = hashCode * 31 + self.adType;
  }
  [self.showTrackingUrlsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasBannerAds) {
    hashCode = hashCode * 31 + [self.bannerAds hash];
  }
  if (self.hasApps) {
    hashCode = hashCode * 31 + [self.apps hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL ResponseImpressionAdADTypeIsValidValue(ResponseImpressionAdADType value) {
  switch (value) {
    case ResponseImpressionAdADTypeKImgbanner:
    case ResponseImpressionAdADTypeKGlbanner:
    case ResponseImpressionAdADTypeKImginterstital:
    case ResponseImpressionAdADTypeKGlinterstital:
    case ResponseImpressionAdADTypeKApps:
    case ResponseImpressionAdADTypeKMdapps:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromResponseImpressionAdADType(ResponseImpressionAdADType value) {
  switch (value) {
    case ResponseImpressionAdADTypeKImgbanner:
      return @"ResponseImpressionAdADTypeKImgbanner";
    case ResponseImpressionAdADTypeKGlbanner:
      return @"ResponseImpressionAdADTypeKGlbanner";
    case ResponseImpressionAdADTypeKImginterstital:
      return @"ResponseImpressionAdADTypeKImginterstital";
    case ResponseImpressionAdADTypeKGlinterstital:
      return @"ResponseImpressionAdADTypeKGlinterstital";
    case ResponseImpressionAdADTypeKApps:
      return @"ResponseImpressionAdADTypeKApps";
    case ResponseImpressionAdADTypeKMdapps:
      return @"ResponseImpressionAdADTypeKMdapps";
    default:
      return nil;
  }
}

@interface ResponseImpressionAdBannerAd ()
@property (strong) NSString* httpSnippet;
@property ResponseImpressionAdBannerAdType type;
@property (strong) NSString* imgUrl;
@property (strong) NSString* logoUrl;
@property (strong) NSString* appNam;
@property (strong) NSString* appDescription;
@property (strong) NSString* clickUrl;
@property ResponseImpressionAdBannerAdProductType productType;
@property (strong) NSString* btnUrl;
@end

@implementation ResponseImpressionAdBannerAd

- (BOOL) hasHttpSnippet {
  return !!hasHttpSnippet_;
}
- (void) setHasHttpSnippet:(BOOL) _value_ {
  hasHttpSnippet_ = !!_value_;
}
@synthesize httpSnippet;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasImgUrl {
  return !!hasImgUrl_;
}
- (void) setHasImgUrl:(BOOL) _value_ {
  hasImgUrl_ = !!_value_;
}
@synthesize imgUrl;
- (BOOL) hasLogoUrl {
  return !!hasLogoUrl_;
}
- (void) setHasLogoUrl:(BOOL) _value_ {
  hasLogoUrl_ = !!_value_;
}
@synthesize logoUrl;
- (BOOL) hasAppNam {
  return !!hasAppNam_;
}
- (void) setHasAppNam:(BOOL) _value_ {
  hasAppNam_ = !!_value_;
}
@synthesize appNam;
- (BOOL) hasAppDescription {
  return !!hasAppDescription_;
}
- (void) setHasAppDescription:(BOOL) _value_ {
  hasAppDescription_ = !!_value_;
}
@synthesize appDescription;
- (BOOL) hasClickUrl {
  return !!hasClickUrl_;
}
- (void) setHasClickUrl:(BOOL) _value_ {
  hasClickUrl_ = !!_value_;
}
@synthesize clickUrl;
- (BOOL) hasProductType {
  return !!hasProductType_;
}
- (void) setHasProductType:(BOOL) _value_ {
  hasProductType_ = !!_value_;
}
@synthesize productType;
- (BOOL) hasBtnUrl {
  return !!hasBtnUrl_;
}
- (void) setHasBtnUrl:(BOOL) _value_ {
  hasBtnUrl_ = !!_value_;
}
@synthesize btnUrl;
- (instancetype) init {
  if ((self = [super init])) {
    self.httpSnippet = @"";
    self.type = ResponseImpressionAdBannerAdTypeKImg;
    self.imgUrl = @"";
    self.logoUrl = @"";
    self.appNam = @"";
    self.appDescription = @"";
    self.clickUrl = @"";
    self.productType = ResponseImpressionAdBannerAdProductTypeKLink;
    self.btnUrl = @"";
  }
  return self;
}
static ResponseImpressionAdBannerAd* defaultResponseImpressionAdBannerAdInstance = nil;
+ (void) initialize {
  if (self == [ResponseImpressionAdBannerAd class]) {
    defaultResponseImpressionAdBannerAdInstance = [[ResponseImpressionAdBannerAd alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseImpressionAdBannerAdInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseImpressionAdBannerAdInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHttpSnippet) {
    [output writeString:1 value:self.httpSnippet];
  }
  if (self.hasType) {
    [output writeEnum:4 value:self.type];
  }
  if (self.hasImgUrl) {
    [output writeString:5 value:self.imgUrl];
  }
  if (self.hasLogoUrl) {
    [output writeString:7 value:self.logoUrl];
  }
  if (self.hasAppNam) {
    [output writeString:8 value:self.appNam];
  }
  if (self.hasAppDescription) {
    [output writeString:9 value:self.appDescription];
  }
  if (self.hasClickUrl) {
    [output writeString:10 value:self.clickUrl];
  }
  if (self.hasProductType) {
    [output writeEnum:11 value:self.productType];
  }
  if (self.hasBtnUrl) {
    [output writeString:12 value:self.btnUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasHttpSnippet) {
    size_ += computeStringSize(1, self.httpSnippet);
  }
  if (self.hasType) {
    size_ += computeEnumSize(4, self.type);
  }
  if (self.hasImgUrl) {
    size_ += computeStringSize(5, self.imgUrl);
  }
  if (self.hasLogoUrl) {
    size_ += computeStringSize(7, self.logoUrl);
  }
  if (self.hasAppNam) {
    size_ += computeStringSize(8, self.appNam);
  }
  if (self.hasAppDescription) {
    size_ += computeStringSize(9, self.appDescription);
  }
  if (self.hasClickUrl) {
    size_ += computeStringSize(10, self.clickUrl);
  }
  if (self.hasProductType) {
    size_ += computeEnumSize(11, self.productType);
  }
  if (self.hasBtnUrl) {
    size_ += computeStringSize(12, self.btnUrl);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseImpressionAdBannerAd*) parseFromData:(NSData*) data {
  return (ResponseImpressionAdBannerAd*)[[[ResponseImpressionAdBannerAd builder] mergeFromData:data] build];
}
+ (ResponseImpressionAdBannerAd*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseImpressionAdBannerAd*)[[[ResponseImpressionAdBannerAd builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseImpressionAdBannerAd*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseImpressionAdBannerAd*)[[[ResponseImpressionAdBannerAd builder] mergeFromInputStream:input] build];
}
+ (ResponseImpressionAdBannerAd*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseImpressionAdBannerAd*)[[[ResponseImpressionAdBannerAd builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseImpressionAdBannerAd*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseImpressionAdBannerAd*)[[[ResponseImpressionAdBannerAd builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseImpressionAdBannerAd*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseImpressionAdBannerAd*)[[[ResponseImpressionAdBannerAd builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseImpressionAdBannerAdBuilder*) builder {
  return [[ResponseImpressionAdBannerAdBuilder alloc] init];
}
+ (ResponseImpressionAdBannerAdBuilder*) builderWithPrototype:(ResponseImpressionAdBannerAd*) prototype {
  return [[ResponseImpressionAdBannerAd builder] mergeFrom:prototype];
}
- (ResponseImpressionAdBannerAdBuilder*) builder {
  return [ResponseImpressionAdBannerAd builder];
}
- (ResponseImpressionAdBannerAdBuilder*) toBuilder {
  return [ResponseImpressionAdBannerAd builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasHttpSnippet) {
    [output appendFormat:@"%@%@: %@\n", indent, @"httpSnippet", self.httpSnippet];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromResponseImpressionAdBannerAdType(self.type)];
  }
  if (self.hasImgUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imgUrl", self.imgUrl];
  }
  if (self.hasLogoUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"logoUrl", self.logoUrl];
  }
  if (self.hasAppNam) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appNam", self.appNam];
  }
  if (self.hasAppDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appDescription", self.appDescription];
  }
  if (self.hasClickUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clickUrl", self.clickUrl];
  }
  if (self.hasProductType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productType", NSStringFromResponseImpressionAdBannerAdProductType(self.productType)];
  }
  if (self.hasBtnUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"btnUrl", self.btnUrl];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasHttpSnippet) {
    [dictionary setObject: self.httpSnippet forKey: @"httpSnippet"];
  }
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasImgUrl) {
    [dictionary setObject: self.imgUrl forKey: @"imgUrl"];
  }
  if (self.hasLogoUrl) {
    [dictionary setObject: self.logoUrl forKey: @"logoUrl"];
  }
  if (self.hasAppNam) {
    [dictionary setObject: self.appNam forKey: @"appNam"];
  }
  if (self.hasAppDescription) {
    [dictionary setObject: self.appDescription forKey: @"appDescription"];
  }
  if (self.hasClickUrl) {
    [dictionary setObject: self.clickUrl forKey: @"clickUrl"];
  }
  if (self.hasProductType) {
    [dictionary setObject: @(self.productType) forKey: @"productType"];
  }
  if (self.hasBtnUrl) {
    [dictionary setObject: self.btnUrl forKey: @"btnUrl"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseImpressionAdBannerAd class]]) {
    return NO;
  }
  ResponseImpressionAdBannerAd *otherMessage = other;
  return
      self.hasHttpSnippet == otherMessage.hasHttpSnippet &&
      (!self.hasHttpSnippet || [self.httpSnippet isEqual:otherMessage.httpSnippet]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasImgUrl == otherMessage.hasImgUrl &&
      (!self.hasImgUrl || [self.imgUrl isEqual:otherMessage.imgUrl]) &&
      self.hasLogoUrl == otherMessage.hasLogoUrl &&
      (!self.hasLogoUrl || [self.logoUrl isEqual:otherMessage.logoUrl]) &&
      self.hasAppNam == otherMessage.hasAppNam &&
      (!self.hasAppNam || [self.appNam isEqual:otherMessage.appNam]) &&
      self.hasAppDescription == otherMessage.hasAppDescription &&
      (!self.hasAppDescription || [self.appDescription isEqual:otherMessage.appDescription]) &&
      self.hasClickUrl == otherMessage.hasClickUrl &&
      (!self.hasClickUrl || [self.clickUrl isEqual:otherMessage.clickUrl]) &&
      self.hasProductType == otherMessage.hasProductType &&
      (!self.hasProductType || self.productType == otherMessage.productType) &&
      self.hasBtnUrl == otherMessage.hasBtnUrl &&
      (!self.hasBtnUrl || [self.btnUrl isEqual:otherMessage.btnUrl]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasHttpSnippet) {
    hashCode = hashCode * 31 + [self.httpSnippet hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasImgUrl) {
    hashCode = hashCode * 31 + [self.imgUrl hash];
  }
  if (self.hasLogoUrl) {
    hashCode = hashCode * 31 + [self.logoUrl hash];
  }
  if (self.hasAppNam) {
    hashCode = hashCode * 31 + [self.appNam hash];
  }
  if (self.hasAppDescription) {
    hashCode = hashCode * 31 + [self.appDescription hash];
  }
  if (self.hasClickUrl) {
    hashCode = hashCode * 31 + [self.clickUrl hash];
  }
  if (self.hasProductType) {
    hashCode = hashCode * 31 + self.productType;
  }
  if (self.hasBtnUrl) {
    hashCode = hashCode * 31 + [self.btnUrl hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL ResponseImpressionAdBannerAdTypeIsValidValue(ResponseImpressionAdBannerAdType value) {
  switch (value) {
    case ResponseImpressionAdBannerAdTypeKImg:
    case ResponseImpressionAdBannerAdTypeKGl:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromResponseImpressionAdBannerAdType(ResponseImpressionAdBannerAdType value) {
  switch (value) {
    case ResponseImpressionAdBannerAdTypeKImg:
      return @"ResponseImpressionAdBannerAdTypeKImg";
    case ResponseImpressionAdBannerAdTypeKGl:
      return @"ResponseImpressionAdBannerAdTypeKGl";
    default:
      return nil;
  }
}

BOOL ResponseImpressionAdBannerAdProductTypeIsValidValue(ResponseImpressionAdBannerAdProductType value) {
  switch (value) {
    case ResponseImpressionAdBannerAdProductTypeKLink:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromResponseImpressionAdBannerAdProductType(ResponseImpressionAdBannerAdProductType value) {
  switch (value) {
    case ResponseImpressionAdBannerAdProductTypeKLink:
      return @"ResponseImpressionAdBannerAdProductTypeKLink";
    default:
      return nil;
  }
}

@interface ResponseImpressionAdBannerAdBuilder()
@property (strong) ResponseImpressionAdBannerAd* resultBannerAd;
@end

@implementation ResponseImpressionAdBannerAdBuilder
@synthesize resultBannerAd;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBannerAd = [[ResponseImpressionAdBannerAd alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBannerAd;
}
- (ResponseImpressionAdBannerAdBuilder*) clear {
  self.resultBannerAd = [[ResponseImpressionAdBannerAd alloc] init];
  return self;
}
- (ResponseImpressionAdBannerAdBuilder*) clone {
  return [ResponseImpressionAdBannerAd builderWithPrototype:resultBannerAd];
}
- (ResponseImpressionAdBannerAd*) defaultInstance {
  return [ResponseImpressionAdBannerAd defaultInstance];
}
- (ResponseImpressionAdBannerAd*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseImpressionAdBannerAd*) buildPartial {
  ResponseImpressionAdBannerAd* returnMe = resultBannerAd;
  self.resultBannerAd = nil;
  return returnMe;
}
- (ResponseImpressionAdBannerAdBuilder*) mergeFrom:(ResponseImpressionAdBannerAd*) other {
  if (other == [ResponseImpressionAdBannerAd defaultInstance]) {
    return self;
  }
  if (other.hasHttpSnippet) {
    [self setHttpSnippet:other.httpSnippet];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasImgUrl) {
    [self setImgUrl:other.imgUrl];
  }
  if (other.hasLogoUrl) {
    [self setLogoUrl:other.logoUrl];
  }
  if (other.hasAppNam) {
    [self setAppNam:other.appNam];
  }
  if (other.hasAppDescription) {
    [self setAppDescription:other.appDescription];
  }
  if (other.hasClickUrl) {
    [self setClickUrl:other.clickUrl];
  }
  if (other.hasProductType) {
    [self setProductType:other.productType];
  }
  if (other.hasBtnUrl) {
    [self setBtnUrl:other.btnUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseImpressionAdBannerAdBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseImpressionAdBannerAdBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setHttpSnippet:[input readString]];
        break;
      }
      case 32: {
        ResponseImpressionAdBannerAdType value = (ResponseImpressionAdBannerAdType)[input readEnum];
        if (ResponseImpressionAdBannerAdTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        [self setImgUrl:[input readString]];
        break;
      }
      case 58: {
        [self setLogoUrl:[input readString]];
        break;
      }
      case 66: {
        [self setAppNam:[input readString]];
        break;
      }
      case 74: {
        [self setAppDescription:[input readString]];
        break;
      }
      case 82: {
        [self setClickUrl:[input readString]];
        break;
      }
      case 88: {
        ResponseImpressionAdBannerAdProductType value = (ResponseImpressionAdBannerAdProductType)[input readEnum];
        if (ResponseImpressionAdBannerAdProductTypeIsValidValue(value)) {
          [self setProductType:value];
        } else {
          [unknownFields mergeVarintField:11 value:value];
        }
        break;
      }
      case 98: {
        [self setBtnUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasHttpSnippet {
  return resultBannerAd.hasHttpSnippet;
}
- (NSString*) httpSnippet {
  return resultBannerAd.httpSnippet;
}
- (ResponseImpressionAdBannerAdBuilder*) setHttpSnippet:(NSString*) value {
  resultBannerAd.hasHttpSnippet = YES;
  resultBannerAd.httpSnippet = value;
  return self;
}
- (ResponseImpressionAdBannerAdBuilder*) clearHttpSnippet {
  resultBannerAd.hasHttpSnippet = NO;
  resultBannerAd.httpSnippet = @"";
  return self;
}
- (BOOL) hasType {
  return resultBannerAd.hasType;
}
- (ResponseImpressionAdBannerAdType) type {
  return resultBannerAd.type;
}
- (ResponseImpressionAdBannerAdBuilder*) setType:(ResponseImpressionAdBannerAdType) value {
  resultBannerAd.hasType = YES;
  resultBannerAd.type = value;
  return self;
}
- (ResponseImpressionAdBannerAdBuilder*) clearType {
  resultBannerAd.hasType = NO;
  resultBannerAd.type = ResponseImpressionAdBannerAdTypeKImg;
  return self;
}
- (BOOL) hasImgUrl {
  return resultBannerAd.hasImgUrl;
}
- (NSString*) imgUrl {
  return resultBannerAd.imgUrl;
}
- (ResponseImpressionAdBannerAdBuilder*) setImgUrl:(NSString*) value {
  resultBannerAd.hasImgUrl = YES;
  resultBannerAd.imgUrl = value;
  return self;
}
- (ResponseImpressionAdBannerAdBuilder*) clearImgUrl {
  resultBannerAd.hasImgUrl = NO;
  resultBannerAd.imgUrl = @"";
  return self;
}
- (BOOL) hasLogoUrl {
  return resultBannerAd.hasLogoUrl;
}
- (NSString*) logoUrl {
  return resultBannerAd.logoUrl;
}
- (ResponseImpressionAdBannerAdBuilder*) setLogoUrl:(NSString*) value {
  resultBannerAd.hasLogoUrl = YES;
  resultBannerAd.logoUrl = value;
  return self;
}
- (ResponseImpressionAdBannerAdBuilder*) clearLogoUrl {
  resultBannerAd.hasLogoUrl = NO;
  resultBannerAd.logoUrl = @"";
  return self;
}
- (BOOL) hasAppNam {
  return resultBannerAd.hasAppNam;
}
- (NSString*) appNam {
  return resultBannerAd.appNam;
}
- (ResponseImpressionAdBannerAdBuilder*) setAppNam:(NSString*) value {
  resultBannerAd.hasAppNam = YES;
  resultBannerAd.appNam = value;
  return self;
}
- (ResponseImpressionAdBannerAdBuilder*) clearAppNam {
  resultBannerAd.hasAppNam = NO;
  resultBannerAd.appNam = @"";
  return self;
}
- (BOOL) hasAppDescription {
  return resultBannerAd.hasAppDescription;
}
- (NSString*) appDescription {
  return resultBannerAd.appDescription;
}
- (ResponseImpressionAdBannerAdBuilder*) setAppDescription:(NSString*) value {
  resultBannerAd.hasAppDescription = YES;
  resultBannerAd.appDescription = value;
  return self;
}
- (ResponseImpressionAdBannerAdBuilder*) clearAppDescription {
  resultBannerAd.hasAppDescription = NO;
  resultBannerAd.appDescription = @"";
  return self;
}
- (BOOL) hasClickUrl {
  return resultBannerAd.hasClickUrl;
}
- (NSString*) clickUrl {
  return resultBannerAd.clickUrl;
}
- (ResponseImpressionAdBannerAdBuilder*) setClickUrl:(NSString*) value {
  resultBannerAd.hasClickUrl = YES;
  resultBannerAd.clickUrl = value;
  return self;
}
- (ResponseImpressionAdBannerAdBuilder*) clearClickUrl {
  resultBannerAd.hasClickUrl = NO;
  resultBannerAd.clickUrl = @"";
  return self;
}
- (BOOL) hasProductType {
  return resultBannerAd.hasProductType;
}
- (ResponseImpressionAdBannerAdProductType) productType {
  return resultBannerAd.productType;
}
- (ResponseImpressionAdBannerAdBuilder*) setProductType:(ResponseImpressionAdBannerAdProductType) value {
  resultBannerAd.hasProductType = YES;
  resultBannerAd.productType = value;
  return self;
}
- (ResponseImpressionAdBannerAdBuilder*) clearProductType {
  resultBannerAd.hasProductType = NO;
  resultBannerAd.productType = ResponseImpressionAdBannerAdProductTypeKLink;
  return self;
}
- (BOOL) hasBtnUrl {
  return resultBannerAd.hasBtnUrl;
}
- (NSString*) btnUrl {
  return resultBannerAd.btnUrl;
}
- (ResponseImpressionAdBannerAdBuilder*) setBtnUrl:(NSString*) value {
  resultBannerAd.hasBtnUrl = YES;
  resultBannerAd.btnUrl = value;
  return self;
}
- (ResponseImpressionAdBannerAdBuilder*) clearBtnUrl {
  resultBannerAd.hasBtnUrl = NO;
  resultBannerAd.btnUrl = @"";
  return self;
}
@end

@interface ResponseImpressionAdApps ()
@property (strong) NSString* logoUrl;
@property (strong) NSString* appNam;
@property (strong) NSString* appDescription;
@property ResponseImpressionAdAppsProductType productType;
@property (strong) NSString* btnUrl;
@property (strong) NSString* clickUrl;
@end

@implementation ResponseImpressionAdApps

- (BOOL) hasLogoUrl {
  return !!hasLogoUrl_;
}
- (void) setHasLogoUrl:(BOOL) _value_ {
  hasLogoUrl_ = !!_value_;
}
@synthesize logoUrl;
- (BOOL) hasAppNam {
  return !!hasAppNam_;
}
- (void) setHasAppNam:(BOOL) _value_ {
  hasAppNam_ = !!_value_;
}
@synthesize appNam;
- (BOOL) hasAppDescription {
  return !!hasAppDescription_;
}
- (void) setHasAppDescription:(BOOL) _value_ {
  hasAppDescription_ = !!_value_;
}
@synthesize appDescription;
- (BOOL) hasProductType {
  return !!hasProductType_;
}
- (void) setHasProductType:(BOOL) _value_ {
  hasProductType_ = !!_value_;
}
@synthesize productType;
- (BOOL) hasBtnUrl {
  return !!hasBtnUrl_;
}
- (void) setHasBtnUrl:(BOOL) _value_ {
  hasBtnUrl_ = !!_value_;
}
@synthesize btnUrl;
- (BOOL) hasClickUrl {
  return !!hasClickUrl_;
}
- (void) setHasClickUrl:(BOOL) _value_ {
  hasClickUrl_ = !!_value_;
}
@synthesize clickUrl;
- (instancetype) init {
  if ((self = [super init])) {
    self.logoUrl = @"";
    self.appNam = @"";
    self.appDescription = @"";
    self.productType = ResponseImpressionAdAppsProductTypeKShare;
    self.btnUrl = @"";
    self.clickUrl = @"";
  }
  return self;
}
static ResponseImpressionAdApps* defaultResponseImpressionAdAppsInstance = nil;
+ (void) initialize {
  if (self == [ResponseImpressionAdApps class]) {
    defaultResponseImpressionAdAppsInstance = [[ResponseImpressionAdApps alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseImpressionAdAppsInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseImpressionAdAppsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLogoUrl) {
    [output writeString:1 value:self.logoUrl];
  }
  if (self.hasAppNam) {
    [output writeString:2 value:self.appNam];
  }
  if (self.hasAppDescription) {
    [output writeString:3 value:self.appDescription];
  }
  if (self.hasProductType) {
    [output writeEnum:4 value:self.productType];
  }
  if (self.hasBtnUrl) {
    [output writeString:5 value:self.btnUrl];
  }
  if (self.hasClickUrl) {
    [output writeString:6 value:self.clickUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLogoUrl) {
    size_ += computeStringSize(1, self.logoUrl);
  }
  if (self.hasAppNam) {
    size_ += computeStringSize(2, self.appNam);
  }
  if (self.hasAppDescription) {
    size_ += computeStringSize(3, self.appDescription);
  }
  if (self.hasProductType) {
    size_ += computeEnumSize(4, self.productType);
  }
  if (self.hasBtnUrl) {
    size_ += computeStringSize(5, self.btnUrl);
  }
  if (self.hasClickUrl) {
    size_ += computeStringSize(6, self.clickUrl);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseImpressionAdApps*) parseFromData:(NSData*) data {
  return (ResponseImpressionAdApps*)[[[ResponseImpressionAdApps builder] mergeFromData:data] build];
}
+ (ResponseImpressionAdApps*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseImpressionAdApps*)[[[ResponseImpressionAdApps builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseImpressionAdApps*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseImpressionAdApps*)[[[ResponseImpressionAdApps builder] mergeFromInputStream:input] build];
}
+ (ResponseImpressionAdApps*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseImpressionAdApps*)[[[ResponseImpressionAdApps builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseImpressionAdApps*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseImpressionAdApps*)[[[ResponseImpressionAdApps builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseImpressionAdApps*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseImpressionAdApps*)[[[ResponseImpressionAdApps builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseImpressionAdAppsBuilder*) builder {
  return [[ResponseImpressionAdAppsBuilder alloc] init];
}
+ (ResponseImpressionAdAppsBuilder*) builderWithPrototype:(ResponseImpressionAdApps*) prototype {
  return [[ResponseImpressionAdApps builder] mergeFrom:prototype];
}
- (ResponseImpressionAdAppsBuilder*) builder {
  return [ResponseImpressionAdApps builder];
}
- (ResponseImpressionAdAppsBuilder*) toBuilder {
  return [ResponseImpressionAdApps builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLogoUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"logoUrl", self.logoUrl];
  }
  if (self.hasAppNam) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appNam", self.appNam];
  }
  if (self.hasAppDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appDescription", self.appDescription];
  }
  if (self.hasProductType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productType", NSStringFromResponseImpressionAdAppsProductType(self.productType)];
  }
  if (self.hasBtnUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"btnUrl", self.btnUrl];
  }
  if (self.hasClickUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clickUrl", self.clickUrl];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLogoUrl) {
    [dictionary setObject: self.logoUrl forKey: @"logoUrl"];
  }
  if (self.hasAppNam) {
    [dictionary setObject: self.appNam forKey: @"appNam"];
  }
  if (self.hasAppDescription) {
    [dictionary setObject: self.appDescription forKey: @"appDescription"];
  }
  if (self.hasProductType) {
    [dictionary setObject: @(self.productType) forKey: @"productType"];
  }
  if (self.hasBtnUrl) {
    [dictionary setObject: self.btnUrl forKey: @"btnUrl"];
  }
  if (self.hasClickUrl) {
    [dictionary setObject: self.clickUrl forKey: @"clickUrl"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseImpressionAdApps class]]) {
    return NO;
  }
  ResponseImpressionAdApps *otherMessage = other;
  return
      self.hasLogoUrl == otherMessage.hasLogoUrl &&
      (!self.hasLogoUrl || [self.logoUrl isEqual:otherMessage.logoUrl]) &&
      self.hasAppNam == otherMessage.hasAppNam &&
      (!self.hasAppNam || [self.appNam isEqual:otherMessage.appNam]) &&
      self.hasAppDescription == otherMessage.hasAppDescription &&
      (!self.hasAppDescription || [self.appDescription isEqual:otherMessage.appDescription]) &&
      self.hasProductType == otherMessage.hasProductType &&
      (!self.hasProductType || self.productType == otherMessage.productType) &&
      self.hasBtnUrl == otherMessage.hasBtnUrl &&
      (!self.hasBtnUrl || [self.btnUrl isEqual:otherMessage.btnUrl]) &&
      self.hasClickUrl == otherMessage.hasClickUrl &&
      (!self.hasClickUrl || [self.clickUrl isEqual:otherMessage.clickUrl]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLogoUrl) {
    hashCode = hashCode * 31 + [self.logoUrl hash];
  }
  if (self.hasAppNam) {
    hashCode = hashCode * 31 + [self.appNam hash];
  }
  if (self.hasAppDescription) {
    hashCode = hashCode * 31 + [self.appDescription hash];
  }
  if (self.hasProductType) {
    hashCode = hashCode * 31 + self.productType;
  }
  if (self.hasBtnUrl) {
    hashCode = hashCode * 31 + [self.btnUrl hash];
  }
  if (self.hasClickUrl) {
    hashCode = hashCode * 31 + [self.clickUrl hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL ResponseImpressionAdAppsProductTypeIsValidValue(ResponseImpressionAdAppsProductType value) {
  switch (value) {
    case ResponseImpressionAdAppsProductTypeKShare:
    case ResponseImpressionAdAppsProductTypeKLink:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromResponseImpressionAdAppsProductType(ResponseImpressionAdAppsProductType value) {
  switch (value) {
    case ResponseImpressionAdAppsProductTypeKShare:
      return @"ResponseImpressionAdAppsProductTypeKShare";
    case ResponseImpressionAdAppsProductTypeKLink:
      return @"ResponseImpressionAdAppsProductTypeKLink";
    default:
      return nil;
  }
}

@interface ResponseImpressionAdAppsBuilder()
@property (strong) ResponseImpressionAdApps* resultApps;
@end

@implementation ResponseImpressionAdAppsBuilder
@synthesize resultApps;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultApps = [[ResponseImpressionAdApps alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultApps;
}
- (ResponseImpressionAdAppsBuilder*) clear {
  self.resultApps = [[ResponseImpressionAdApps alloc] init];
  return self;
}
- (ResponseImpressionAdAppsBuilder*) clone {
  return [ResponseImpressionAdApps builderWithPrototype:resultApps];
}
- (ResponseImpressionAdApps*) defaultInstance {
  return [ResponseImpressionAdApps defaultInstance];
}
- (ResponseImpressionAdApps*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseImpressionAdApps*) buildPartial {
  ResponseImpressionAdApps* returnMe = resultApps;
  self.resultApps = nil;
  return returnMe;
}
- (ResponseImpressionAdAppsBuilder*) mergeFrom:(ResponseImpressionAdApps*) other {
  if (other == [ResponseImpressionAdApps defaultInstance]) {
    return self;
  }
  if (other.hasLogoUrl) {
    [self setLogoUrl:other.logoUrl];
  }
  if (other.hasAppNam) {
    [self setAppNam:other.appNam];
  }
  if (other.hasAppDescription) {
    [self setAppDescription:other.appDescription];
  }
  if (other.hasProductType) {
    [self setProductType:other.productType];
  }
  if (other.hasBtnUrl) {
    [self setBtnUrl:other.btnUrl];
  }
  if (other.hasClickUrl) {
    [self setClickUrl:other.clickUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseImpressionAdAppsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseImpressionAdAppsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setLogoUrl:[input readString]];
        break;
      }
      case 18: {
        [self setAppNam:[input readString]];
        break;
      }
      case 26: {
        [self setAppDescription:[input readString]];
        break;
      }
      case 32: {
        ResponseImpressionAdAppsProductType value = (ResponseImpressionAdAppsProductType)[input readEnum];
        if (ResponseImpressionAdAppsProductTypeIsValidValue(value)) {
          [self setProductType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        [self setBtnUrl:[input readString]];
        break;
      }
      case 50: {
        [self setClickUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasLogoUrl {
  return resultApps.hasLogoUrl;
}
- (NSString*) logoUrl {
  return resultApps.logoUrl;
}
- (ResponseImpressionAdAppsBuilder*) setLogoUrl:(NSString*) value {
  resultApps.hasLogoUrl = YES;
  resultApps.logoUrl = value;
  return self;
}
- (ResponseImpressionAdAppsBuilder*) clearLogoUrl {
  resultApps.hasLogoUrl = NO;
  resultApps.logoUrl = @"";
  return self;
}
- (BOOL) hasAppNam {
  return resultApps.hasAppNam;
}
- (NSString*) appNam {
  return resultApps.appNam;
}
- (ResponseImpressionAdAppsBuilder*) setAppNam:(NSString*) value {
  resultApps.hasAppNam = YES;
  resultApps.appNam = value;
  return self;
}
- (ResponseImpressionAdAppsBuilder*) clearAppNam {
  resultApps.hasAppNam = NO;
  resultApps.appNam = @"";
  return self;
}
- (BOOL) hasAppDescription {
  return resultApps.hasAppDescription;
}
- (NSString*) appDescription {
  return resultApps.appDescription;
}
- (ResponseImpressionAdAppsBuilder*) setAppDescription:(NSString*) value {
  resultApps.hasAppDescription = YES;
  resultApps.appDescription = value;
  return self;
}
- (ResponseImpressionAdAppsBuilder*) clearAppDescription {
  resultApps.hasAppDescription = NO;
  resultApps.appDescription = @"";
  return self;
}
- (BOOL) hasProductType {
  return resultApps.hasProductType;
}
- (ResponseImpressionAdAppsProductType) productType {
  return resultApps.productType;
}
- (ResponseImpressionAdAppsBuilder*) setProductType:(ResponseImpressionAdAppsProductType) value {
  resultApps.hasProductType = YES;
  resultApps.productType = value;
  return self;
}
- (ResponseImpressionAdAppsBuilder*) clearProductType {
  resultApps.hasProductType = NO;
  resultApps.productType = ResponseImpressionAdAppsProductTypeKShare;
  return self;
}
- (BOOL) hasBtnUrl {
  return resultApps.hasBtnUrl;
}
- (NSString*) btnUrl {
  return resultApps.btnUrl;
}
- (ResponseImpressionAdAppsBuilder*) setBtnUrl:(NSString*) value {
  resultApps.hasBtnUrl = YES;
  resultApps.btnUrl = value;
  return self;
}
- (ResponseImpressionAdAppsBuilder*) clearBtnUrl {
  resultApps.hasBtnUrl = NO;
  resultApps.btnUrl = @"";
  return self;
}
- (BOOL) hasClickUrl {
  return resultApps.hasClickUrl;
}
- (NSString*) clickUrl {
  return resultApps.clickUrl;
}
- (ResponseImpressionAdAppsBuilder*) setClickUrl:(NSString*) value {
  resultApps.hasClickUrl = YES;
  resultApps.clickUrl = value;
  return self;
}
- (ResponseImpressionAdAppsBuilder*) clearClickUrl {
  resultApps.hasClickUrl = NO;
  resultApps.clickUrl = @"";
  return self;
}
@end

@interface ResponseImpressionAdBuilder()
@property (strong) ResponseImpressionAd* resultImpressionAd;
@end

@implementation ResponseImpressionAdBuilder
@synthesize resultImpressionAd;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImpressionAd = [[ResponseImpressionAd alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImpressionAd;
}
- (ResponseImpressionAdBuilder*) clear {
  self.resultImpressionAd = [[ResponseImpressionAd alloc] init];
  return self;
}
- (ResponseImpressionAdBuilder*) clone {
  return [ResponseImpressionAd builderWithPrototype:resultImpressionAd];
}
- (ResponseImpressionAd*) defaultInstance {
  return [ResponseImpressionAd defaultInstance];
}
- (ResponseImpressionAd*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseImpressionAd*) buildPartial {
  ResponseImpressionAd* returnMe = resultImpressionAd;
  self.resultImpressionAd = nil;
  return returnMe;
}
- (ResponseImpressionAdBuilder*) mergeFrom:(ResponseImpressionAd*) other {
  if (other == [ResponseImpressionAd defaultInstance]) {
    return self;
  }
  if (other.hasExpressionId) {
    [self setExpressionId:other.expressionId];
  }
  if (other.hasAdType) {
    [self setAdType:other.adType];
  }
  if (other.showTrackingUrlsArray.count > 0) {
    if (resultImpressionAd.showTrackingUrlsArray == nil) {
      resultImpressionAd.showTrackingUrlsArray = [[NSMutableArray alloc] initWithArray:other.showTrackingUrlsArray];
    } else {
      [resultImpressionAd.showTrackingUrlsArray addObjectsFromArray:other.showTrackingUrlsArray];
    }
  }
  if (other.hasBannerAds) {
    [self mergeBannerAds:other.bannerAds];
  }
  if (other.hasApps) {
    [self mergeApps:other.apps];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseImpressionAdBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseImpressionAdBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setExpressionId:[input readInt32]];
        break;
      }
      case 16: {
        ResponseImpressionAdADType value = (ResponseImpressionAdADType)[input readEnum];
        if (ResponseImpressionAdADTypeIsValidValue(value)) {
          [self setAdType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self addShowTrackingUrls:[input readString]];
        break;
      }
      case 34: {
        ResponseImpressionAdBannerAdBuilder* subBuilder = [ResponseImpressionAdBannerAd builder];
        if (self.hasBannerAds) {
          [subBuilder mergeFrom:self.bannerAds];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBannerAds:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        ResponseImpressionAdAppsBuilder* subBuilder = [ResponseImpressionAdApps builder];
        if (self.hasApps) {
          [subBuilder mergeFrom:self.apps];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setApps:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasExpressionId {
  return resultImpressionAd.hasExpressionId;
}
- (SInt32) expressionId {
  return resultImpressionAd.expressionId;
}
- (ResponseImpressionAdBuilder*) setExpressionId:(SInt32) value {
  resultImpressionAd.hasExpressionId = YES;
  resultImpressionAd.expressionId = value;
  return self;
}
- (ResponseImpressionAdBuilder*) clearExpressionId {
  resultImpressionAd.hasExpressionId = NO;
  resultImpressionAd.expressionId = 0;
  return self;
}
- (BOOL) hasAdType {
  return resultImpressionAd.hasAdType;
}
- (ResponseImpressionAdADType) adType {
  return resultImpressionAd.adType;
}
- (ResponseImpressionAdBuilder*) setAdType:(ResponseImpressionAdADType) value {
  resultImpressionAd.hasAdType = YES;
  resultImpressionAd.adType = value;
  return self;
}
- (ResponseImpressionAdBuilder*) clearAdType {
  resultImpressionAd.hasAdType = NO;
  resultImpressionAd.adType = ResponseImpressionAdADTypeKImgbanner;
  return self;
}
- (NSMutableArray *)showTrackingUrls {
  return resultImpressionAd.showTrackingUrlsArray;
}
- (NSString*)showTrackingUrlsAtIndex:(NSUInteger)index {
  return [resultImpressionAd showTrackingUrlsAtIndex:index];
}
- (ResponseImpressionAdBuilder *)addShowTrackingUrls:(NSString*)value {
  if (resultImpressionAd.showTrackingUrlsArray == nil) {
    resultImpressionAd.showTrackingUrlsArray = [[NSMutableArray alloc]init];
  }
  [resultImpressionAd.showTrackingUrlsArray addObject:value];
  return self;
}
- (ResponseImpressionAdBuilder *)setShowTrackingUrlsArray:(NSArray *)array {
  resultImpressionAd.showTrackingUrlsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (ResponseImpressionAdBuilder *)clearShowTrackingUrls {
  resultImpressionAd.showTrackingUrlsArray = nil;
  return self;
}
- (BOOL) hasBannerAds {
  return resultImpressionAd.hasBannerAds;
}
- (ResponseImpressionAdBannerAd*) bannerAds {
  return resultImpressionAd.bannerAds;
}
- (ResponseImpressionAdBuilder*) setBannerAds:(ResponseImpressionAdBannerAd*) value {
  resultImpressionAd.hasBannerAds = YES;
  resultImpressionAd.bannerAds = value;
  return self;
}
- (ResponseImpressionAdBuilder*) setBannerAdsBuilder:(ResponseImpressionAdBannerAdBuilder*) builderForValue {
  return [self setBannerAds:[builderForValue build]];
}
- (ResponseImpressionAdBuilder*) mergeBannerAds:(ResponseImpressionAdBannerAd*) value {
  if (resultImpressionAd.hasBannerAds &&
      resultImpressionAd.bannerAds != [ResponseImpressionAdBannerAd defaultInstance]) {
    resultImpressionAd.bannerAds =
      [[[ResponseImpressionAdBannerAd builderWithPrototype:resultImpressionAd.bannerAds] mergeFrom:value] buildPartial];
  } else {
    resultImpressionAd.bannerAds = value;
  }
  resultImpressionAd.hasBannerAds = YES;
  return self;
}
- (ResponseImpressionAdBuilder*) clearBannerAds {
  resultImpressionAd.hasBannerAds = NO;
  resultImpressionAd.bannerAds = [ResponseImpressionAdBannerAd defaultInstance];
  return self;
}
- (BOOL) hasApps {
  return resultImpressionAd.hasApps;
}
- (ResponseImpressionAdApps*) apps {
  return resultImpressionAd.apps;
}
- (ResponseImpressionAdBuilder*) setApps:(ResponseImpressionAdApps*) value {
  resultImpressionAd.hasApps = YES;
  resultImpressionAd.apps = value;
  return self;
}
- (ResponseImpressionAdBuilder*) setAppsBuilder:(ResponseImpressionAdAppsBuilder*) builderForValue {
  return [self setApps:[builderForValue build]];
}
- (ResponseImpressionAdBuilder*) mergeApps:(ResponseImpressionAdApps*) value {
  if (resultImpressionAd.hasApps &&
      resultImpressionAd.apps != [ResponseImpressionAdApps defaultInstance]) {
    resultImpressionAd.apps =
      [[[ResponseImpressionAdApps builderWithPrototype:resultImpressionAd.apps] mergeFrom:value] buildPartial];
  } else {
    resultImpressionAd.apps = value;
  }
  resultImpressionAd.hasApps = YES;
  return self;
}
- (ResponseImpressionAdBuilder*) clearApps {
  resultImpressionAd.hasApps = NO;
  resultImpressionAd.apps = [ResponseImpressionAdApps defaultInstance];
  return self;
}
@end

@interface ResponseBuilder()
@property (strong) Response* resultResponse;
@end

@implementation ResponseBuilder
@synthesize resultResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponse = [[Response alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponse;
}
- (ResponseBuilder*) clear {
  self.resultResponse = [[Response alloc] init];
  return self;
}
- (ResponseBuilder*) clone {
  return [Response builderWithPrototype:resultResponse];
}
- (Response*) defaultInstance {
  return [Response defaultInstance];
}
- (Response*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Response*) buildPartial {
  Response* returnMe = resultResponse;
  self.resultResponse = nil;
  return returnMe;
}
- (ResponseBuilder*) mergeFrom:(Response*) other {
  if (other == [Response defaultInstance]) {
    return self;
  }
  if (other.hasEventId) {
    [self setEventId:other.eventId];
  }
  if (other.impAdsArray.count > 0) {
    if (resultResponse.impAdsArray == nil) {
      resultResponse.impAdsArray = [[NSMutableArray alloc] initWithArray:other.impAdsArray];
    } else {
      [resultResponse.impAdsArray addObjectsFromArray:other.impAdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventId:[input readString]];
        break;
      }
      case 18: {
        ResponseImpressionAdBuilder* subBuilder = [ResponseImpressionAd builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addImpAds:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasEventId {
  return resultResponse.hasEventId;
}
- (NSString*) eventId {
  return resultResponse.eventId;
}
- (ResponseBuilder*) setEventId:(NSString*) value {
  resultResponse.hasEventId = YES;
  resultResponse.eventId = value;
  return self;
}
- (ResponseBuilder*) clearEventId {
  resultResponse.hasEventId = NO;
  resultResponse.eventId = @"";
  return self;
}
- (NSMutableArray *)impAds {
  return resultResponse.impAdsArray;
}
- (ResponseImpressionAd*)impAdsAtIndex:(NSUInteger)index {
  return [resultResponse impAdsAtIndex:index];
}
- (ResponseBuilder *)addImpAds:(ResponseImpressionAd*)value {
  if (resultResponse.impAdsArray == nil) {
    resultResponse.impAdsArray = [[NSMutableArray alloc]init];
  }
  [resultResponse.impAdsArray addObject:value];
  return self;
}
- (ResponseBuilder *)setImpAdsArray:(NSArray *)array {
  resultResponse.impAdsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ResponseBuilder *)clearImpAds {
  resultResponse.impAdsArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
